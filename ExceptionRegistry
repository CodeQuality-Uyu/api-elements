using Sony.Ci.AccessControl;
using Sony.Ci.ErrorMapping.Core;
using Sony.Ci.Storage.Configurations;
using Sony.Ci.WebApi.Resources;
using Sony.CiFiles.AccessControl;
using Sony.CiFiles.Archive;
using Sony.CiFiles.Assets;
using Sony.CiFiles.Authentication.Mfa;
using Sony.CiFiles.Aws;
using Sony.CiFiles.Catalogs;
using Sony.CiFiles.Changes;
using Sony.CiFiles.Conversations.Exceptions;
using Sony.CiFiles.CreatorsCloud.Exceptions;
using Sony.CiFiles.Dolby;
using Sony.CiFiles.Download;
using Sony.CiFiles.Elements;
using Sony.CiFiles.Elements.Copy;
using Sony.CiFiles.Events;
using Sony.CiFiles.Exceptions;
using Sony.CiFiles.Exceptions.Aspera;
using Sony.CiFiles.Exceptions.AssetMigration;
using Sony.CiFiles.Exceptions.Assets;
using Sony.CiFiles.Exceptions.Billing;
using Sony.CiFiles.Exceptions.Branding;
using Sony.CiFiles.Exceptions.BulkOperations;
using Sony.CiFiles.Exceptions.CiJob;
using Sony.CiFiles.Exceptions.CreatorsCloud;
using Sony.CiFiles.Exceptions.Download;
using Sony.CiFiles.Exceptions.FileRequests;
using Sony.CiFiles.Exceptions.LiveStreams;
using Sony.CiFiles.Exceptions.Mediaboxes;
using Sony.CiFiles.Exceptions.Query;
using Sony.CiFiles.Exceptions.S3PushTransfer;
using Sony.CiFiles.Exceptions.StoragePolicies;
using Sony.CiFiles.Exceptions.WorkSessions;
using Sony.CiFiles.Exceptions.Workspaces;
using Sony.CiFiles.Folders;
using Sony.CiFiles.ForensicWatermark;
using Sony.CiFiles.Frames;
using Sony.CiFiles.Import.Configurations;
using Sony.CiFiles.LocationLookup.Exceptions;
using Sony.CiFiles.Mediaboxes;
using Sony.CiFiles.MediaLogs;
using Sony.CiFiles.Metadata;
using Sony.CiFiles.Models;
using Sony.CiFiles.PlaybackStreams;
using Sony.CiFiles.Security.Authorization;
using Sony.CiFiles.StoragePolicies;
using Sony.CiFiles.Thumbnails;
using Sony.CiFiles.TimeMarks;
using Sony.CiFiles.UserGroups;
using Sony.CiFiles.Webhooks;
using Sony.CiFiles.WorkSessions;
using Sony.CiFiles.Workspaces;
using Sony.Mcs.Logging;
using System;
using System.Collections.Generic;
using System.Net;
using System.Web.Http.Filters;

namespace Sony.Ci.Api.Core.Filters
{
    public class ExceptionRegistry
    {
        public ExceptionRegistry(IExceptionMappingService exceptionMappingService)
        {
            ExceptionMappingService = exceptionMappingService;
        }

        private IExceptionMappingService ExceptionMappingService { get; set; }

        public void RegisterKnownExceptions()
        {
            ExceptionMappingService.RegisterMapping<UnauthorizedAccessException>(GetAuthenticationMessage,
                                                          (e, c) => GetExtraInformation(c, e),
                                                          HttpStatusCode.BadRequest, 
                                                          GetAuthenticationMessage,
                                                          Response.AuthenticationFailedCode);

            ExceptionMappingService.RegisterMapping<SsoAuthRequiredException>(GetSsoAuthRequiredMessage,
                                                          (e, c) => GetExtraInformation(c, e),
                                                          HttpStatusCode.BadRequest,
                                                          GetSsoAuthRequiredMessage,
                                                          Response.SsoAuthRequiredCode);

            ExceptionMappingService.RegisterMapping<ResourceNotFoundException>(GetResourceNotFoundMessage, 
                                                        (e, c) => GetExtraInformation(c, e),
                                                        HttpStatusCode.NotFound, 
                                                        GetResourceNotFoundMessage,
                                                        Response.ResourceNotFoundCode);

            ExceptionMappingService.RegisterMapping<McsAuthenticationException>(GetMcsAuthenticationMessage, 
                                                        (e, c) => GetExtraInformation(c, e),
                                                        HttpStatusCode.BadRequest,
                                                        GetMcsAuthenticationMessage,
                                                        Response.McsAuthenticationCode);

            ExceptionMappingService.RegisterMapping<SonyIdAuthenticationException>(Response.SonyIdAuthenticationMessage, 
                                                        (e, c) => GetExtraInformation(c, e),
                                                        HttpStatusCode.BadRequest,
                                                        Response.SonyIdAuthenticationMessage,
                                                        Response.SonyIdAuthenticationCode);    

            ExceptionMappingService.RegisterMapping<DomainNotAllowedException>(Response.EmailDomainNotAllowedMessage, 
                                                        (e, c) => GetExtraInformation(c, e),
                                                        HttpStatusCode.BadRequest,
                                                        Response.EmailDomainNotAllowedMessage,
                                                        Response.EmailDomainNotAllowedCode);

            ExceptionMappingService.RegisterMapping<MissingPcuForExpeditedRestoreException>(Response.MissingPcuForExpeditedRestore,
                                                       (e, c) => GetExtraInformationForPCU(c, e),
                                                       HttpStatusCode.ServiceUnavailable, Response.MissingPcuForExpeditedRestore,
                                                       Response.InsufficientPcuForExpeditedRestoreCode);

            ExceptionMappingService.RegisterMapping<AccessCodeNotFoundException>("Access code not found.",
                                                        (e, c) => GetExtraInformationForAccessCode(c, e.AccessCode),
                                                        HttpStatusCode.NotFound, Response.AccessCodeNotFound,
                                                        Response.AccessCodeNotFoundCode);

            ExceptionMappingService.RegisterMapping<AssetAccessDeniedException>("Access denied.",
                                                        (e, c) => GetExtraInformation(c, e.AssetId),
                                                        HttpStatusCode.NotFound, Response.AssetNotFound,
                                                        Response.AssetNotFoundCode);

            ExceptionMappingService.RegisterMapping<AssetAccessDeniedException>("Access denied.",
                                            (e, c) => GetExtraInformation(c, e.AssetId),
                                            HttpStatusCode.BadRequest, Response.AssetNotFound,
                                            Response.AssetNotFoundCode, controllerName: "ElementSinglePartUploadController");

            ExceptionMappingService.RegisterMapping<AssetAccessDeniedException>("Access denied.",
                                            (e, c) => GetExtraInformation(c, e.AssetId),
                                            HttpStatusCode.BadRequest, Response.AssetNotFound,
                                            Response.AssetNotFoundCode, controllerName: "ElementMultipartUploadController");

            ExceptionMappingService.RegisterMapping<CleverbridgeSubscriptionNotFoundException>(Response.CleverbridgeSubscriptionNotFound,
                                            (e, c) => GetExtraInformationWithMessage(c, e.Message), HttpStatusCode.BadRequest,
                                            Response.CleverbridgeSubscriptionNotFound,
                                            Response.CleverbridgeSubscriptionNotFoundCode);

            ExceptionMappingService.RegisterMapping<CleverbridgeNoSubscriptionItemFoundException>(Response.CleverbridgeNoSubscriptionItemFound,
                                            (e, c) => GetExtraInformationWithMessage(c, e.Message), HttpStatusCode.BadRequest,
                                            Response.CleverbridgeNoSubscriptionItemFound,
                                            Response.CleverbridgeNoSubscriptionItemFoundCode);

            ExceptionMappingService.RegisterMapping<CleverbridgeException>(Response.CleverbridgeExceptionMessage,
                                            (e, c) => GetExtraInformationWithMessage(c, e.Message), HttpStatusCode.BadRequest,
                                            Response.CleverbridgeExceptionMessage,
                                            Response.CleverbridgeExceptionCode);

            ExceptionMappingService.RegisterMapping<AssetNotFoundException>(Response.AssetNotFound,
                                                    (e, c) => GetExtraInformation(c, e.AssetId), HttpStatusCode.NotFound,
                                                    Response.AssetNotFound,
                                                    Response.AssetNotFoundCode);

            ExceptionMappingService.RegisterMapping<AssetNotFoundException>(Response.AssetNotFound,
                                                    (e, c) => GetExtraInformation(c, e.AssetId), HttpStatusCode.BadRequest,
                                                    Response.AssetNotFound,
                                                    Response.AssetNotFoundCode, controllerName: "ElementSinglePartUploadController");

            ExceptionMappingService.RegisterMapping<AssetNotFoundException>(Response.AssetNotFound,
                                                    (e, c) => GetExtraInformation(c, e.AssetId), HttpStatusCode.BadRequest,
                                                    Response.AssetNotFound,
                                                    Response.AssetNotFoundCode, controllerName: "ElementMultipartUploadController");

            ExceptionMappingService.RegisterMapping<CreateElementForbiddenException>(Response.InsufficientPermissionsForCreateElement,
                                                            (e, c) => GetExtraInformationForForbiddenException(c, e),
                                                            HttpStatusCode.Forbidden,
                                                            Response.InsufficientPermissionsForCreateElement,
                                                            Response.InsufficientPermissionsCode, controllerName: "ElementMultipartUploadController");

            ExceptionMappingService.RegisterMapping<ElementNotFoundException>(Response.ElementNotFound,
                                        (e, c) => GetExtraInformationWithElementId(c, e.ElementId), HttpStatusCode.NotFound,
                                        Response.ElementNotFound,
                                        Response.ElementNotFoundCode);

            ExceptionMappingService.RegisterMapping<ElementAccessDeniedException>(Response.ElementNotFound,
                            (e, c) => GetExtraInformationWithElementId(c, e.ElementId), HttpStatusCode.NotFound,
                            Response.ElementNotFound,
                            Response.ElementNotFoundCode);

            ExceptionMappingService.RegisterMapping<CiJobNotFoundException>(Response.CiJobNotFound,
                                        (e, c) => GetExtraInformationWithCiJobId(c, e.CiJobId), HttpStatusCode.NotFound,
                                        Response.CiJobNotFound,
                                        Response.CiJobNotFoundCode);

            ExceptionMappingService.RegisterMapping<CiJobAccessDeniedException>("Access denied to CiJob",
                                        (e, c) => GetExtraInformationWithCiJobId(c, e.CiJobId), HttpStatusCode.NotFound,
                                        Response.CiJobNotFound,
                                        Response.CiJobNotFoundCode);

            ExceptionMappingService.RegisterMapping<IngestJobNotFoundException>(Response.CiJobNotFound,
                            (e, c) => GetExtraInformationWithIngestJobId(c, e.JobId), HttpStatusCode.NotFound,
                            Response.IngestJobNotFound,
                            Response.IngestJobNotFoundCode);

            ExceptionMappingService.RegisterMapping<JobIdNotProvidedException>(Response.JobIdNotProvided,
                                                          (e, c) => GetExtraInformationWithNoJobId(c),
                                                          HttpStatusCode.BadRequest, Response.JobIdNotProvided,
                                                          Response.JobIdNotProvidedCode);

            ExceptionMappingService.RegisterMapping<Exception>(Response.UnhandledException,
                                                          (e, c) => GetExtraInformationWithNoAssetId(c),
                                                          HttpStatusCode.InternalServerError, Response.UnhandledException,
                                                          Response.UnhandledExceptionCode, LogLevel.Error);

            ExceptionMappingService.RegisterMapping<ExceededBulkOperationMaxException>(Response.ExceededMaxAssetCount,
                                                    (e, c) => GetExtraInformationWithCount(c, e.Count), HttpStatusCode.BadRequest,
                                                    Response.ExceededMaxAssetCount,
                                                    Response.ExceededMaxAssetCountCode);

            ExceptionMappingService.RegisterMapping<ExceededBulkOperationMaxException>(Response.ExceededMaxFolderCount,
                                                    (e, c) => GetExtraInformationWithCount(c, e.Count), HttpStatusCode.BadRequest,
                                                    Response.ExceededMaxFolderCount,
                                                    Response.ExceededMaxFolderCountCode, controllerName: "TrashFolderController");

            ExceptionMappingService.RegisterMapping<ExceededBulkOperationMaxException>(Response.ExceededMaxFolderCount,
                                                    (e, c) => GetExtraInformationWithCount(c, e.Count), HttpStatusCode.BadRequest,
                                                    Response.ExceededMaxFolderCount,
                                                    Response.ExceededMaxFolderCountCode, controllerName: "BulkFolderDetailsController");

            ExceptionMappingService.RegisterMapping<ExceededBulkOperationMaxException>(Response.ExceededMaxFolderCount,
                                                    (e, c) => GetExtraInformationWithCount(c, e.Count), HttpStatusCode.BadRequest,
                                                    Response.ExceededMaxFolderCount,
                                                    Response.ExceededMaxFolderCountCode, controllerName: "BulkFolderMetadataChangeController");

            ExceptionMappingService.RegisterMapping<ExceededBulkOperationMaxException>(Response.ExceededMaxFolderCount,
                                                    (e, c) => GetExtraInformationWithCount(c, e.Count), HttpStatusCode.BadRequest,
                                                    Response.ExceededMaxFolderCount,
                                                    Response.ExceededMaxFolderCountCode, controllerName: "BulkDeleteFolderController");

            ExceptionMappingService.RegisterMapping<ExceededBulkOperationMaxException>(Response.ExceededMaxJobCount,
                                                    (e, c) => GetExtraInformationWithCount(c, e.Count), HttpStatusCode.BadRequest,
                                                    Response.ExceededMaxJobCount,
                                                    Response.ExceededMaxJobCountCode, controllerName: "BulkCiJobsController");

            ExceptionMappingService.RegisterMapping<ExceededBulkOperationMaxException>(Response.ExceededMaxFolderCount,
                                        (e, c) => GetExtraInformationWithCount(c, e.Count), HttpStatusCode.BadRequest,
                                        Response.ExceededMaxFolderCount,
                                        Response.ExceededMaxFolderCountCode, controllerName: "MoveFoldersController");

            ExceptionMappingService.RegisterMapping<ExceededBulkOperationMaxException>(Response.ExceededMaxAssetCount,
                                        (e, c) => GetExtraInformationWithCount(c, e.Count), HttpStatusCode.BadRequest,
                                        Response.ExceededMaxAssetCountForFolderDownload,
                                        Response.ExceededMaxAssetCountCode, controllerName: "AsperaFolderDownloadController");

            ExceptionMappingService.RegisterMapping<ExceededBulkOperationMaxException>(Response.ExceededMaxFolderCount,
                            (e, c) => GetExtraInformationWithCount(c, e.Count), HttpStatusCode.BadRequest,
                            Response.ExceededMaxFolderCount,
                            Response.ExceededMaxFolderCountCode, controllerName: "BulkArchiveFolderController");

            ExceptionMappingService.RegisterMapping<ExceededAsperaTransferMaxItemsException>(Response.ExceededMaxAssetCountForAsperaTransfer,
                                        (e, c) => GetExtraInformationWithCount(c, e.Count), HttpStatusCode.BadRequest,
                                        Response.ExceededMaxAssetCountForAsperaTransfer,
                                        Response.ExceededMaxAssetCountCode);

            ExceptionMappingService.RegisterMapping<MailChimpUnsubscribeException>(Response.MailChimpUnsubscribeWebhook,
                                                          (e, c) => GetExtraInformationForUnsubscribeWebhook(c, e.Message),
                                                          HttpStatusCode.BadRequest, Response.MailChimpUnsubscribeWebhook,
                                                          Response.UnhandledExceptionCode, LogLevel.Error);

            ExceptionMappingService.RegisterMapping<ZohoWebhookException>(Response.MailChimpUnsubscribeWebhook,
                                              (e, c) => GetExtraInformationForUnsubscribeWebhook(c, e.Message),
                                              HttpStatusCode.BadRequest, Response.ZohoUpdateWebhook,
                                              Response.UnhandledExceptionCode, LogLevel.Error);

            ExceptionMappingService.RegisterMapping<InvalidStorageConfigurationException>("Invalid Storage Configuration",
                                                          (e, c) => GetExtraInformationWithNoAssetId(c),
                                                          HttpStatusCode.InternalServerError, Response.UnhandledException,
                                                          Response.UnhandledExceptionCode);

            ExceptionMappingService.RegisterMapping<AssetAlreadyUnTrashedException>(Response.AssetNotTrashed,
                                                          (e, c) => GetExtraInformation(c, e.AssetId),
                                                          HttpStatusCode.Conflict, Response.AssetNotTrashed,
                                                          Response.AssetNotTrashedCode);

            ExceptionMappingService.RegisterMapping<ElementIdNotProvidedException>(Response.ElementIdNotProvided,
                                                          (e, c) => GetExtraInformationWithNoAssetId(c),
                                                          HttpStatusCode.BadRequest, Response.ElementIdNotProvided,
                                                          Response.ElementIdNotProvidedCode);

            ExceptionMappingService.RegisterMapping<FolderIdNotProvidedException>(Response.FolderIdNotProvided,
                                                          (e, c) => GetExtraInformationWithNoAssetId(c),
                                                          HttpStatusCode.BadRequest, Response.FolderIdNotProvided,
                                                          Response.FolderIdNotProvidedCode);

            ExceptionMappingService.RegisterMapping<AssetIdNotProvidedException>(Response.AssetIdNotProvided,
                                                          (e, c) => GetExtraInformationWithNoAssetId(c),
                                                          HttpStatusCode.BadRequest, Response.AssetIdNotProvided,
                                                          Response.AssetIdNotProvidedCode);

            ExceptionMappingService.RegisterMapping<AssetsAndFoldersNotAllowedInOperationException>(Response.AssetsAndFoldersNotAllowedInOperation,
                                            (e, c) => GetExtraInformationWithNoAssetId(c),
                                            HttpStatusCode.BadRequest, Response.AssetsAndFoldersNotAllowedInOperation,
                                            Response.InvalidRequestCode);

            ExceptionMappingService.RegisterMapping<ContentNotProvidedException>(Response.ContentNotProvided,
                                                          (e, c) => GetExtraInformationWithNoAssetId(c),
                                                          HttpStatusCode.BadRequest, Response.ContentNotProvided,
                                                          Response.ContentNotProvidedCode);

            ExceptionMappingService.RegisterMapping<TokenScopeNotProvidedException>(Response.TokenScopeNotProvided,
                                                          (e, c) => GetExtraInformationWithNoAssetId(c),
                                                          HttpStatusCode.BadRequest, Response.TokenScopeNotProvided,
                                                          Response.TokenScopeNotProvidedCode);

            ExceptionMappingService.RegisterMapping<ChunkListNameNotProvidedException>(Response.ChunkListNameNotProvided,
                                              (e, c) => GetExtraInformationWithNoAssetId(c),
                                              HttpStatusCode.BadRequest, Response.ChunkListNameNotProvided,
                                              Response.ChunkListNameNotProvidedCode);

            ExceptionMappingService.RegisterMapping<MultipleAssetIdsProvidedException>(Response.InvalidAsperaTransfer_MultipleAssetIdsProvided,
                                                          (e, c) => GetExtraInformationWithNoAssetId(c),
                                                          HttpStatusCode.BadRequest, Response.InvalidAsperaTransfer_MultipleAssetIdsProvided,
                                                          Response.MultipleAssetIdsProvidedCode);

            ExceptionMappingService.RegisterMapping<InvalidOperationOnAssetBeingArchivedException>(Response.InvalidArchiveOperation_AssetIsBeingArchived,
                                                          (e, c) => GetExtraInformation(c, e.AssetId),
                                                          HttpStatusCode.Conflict, Response.InvalidArchiveOperation_AssetIsBeingArchived,
                                                          Response.InvalidAssetStateCode, controllerName: "ArchiveController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnAssetBeingArchivedException>(Response.InvalidArchiveOperation_AssetIsBeingArchived,
                                                          (e, c) => GetExtraInformation(c, e.AssetId),
                                                          HttpStatusCode.Conflict, Response.InvalidArchiveOperation_AssetIsBeingArchived,
                                                          Response.InvalidAssetStateCode, controllerName: "BulkArchiveController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnAssetBeingArchivedException>(Response.InvalidAsperaTransfer_AssetIsBeingArchived,
                                                          (e, c) => GetExtraInformation(c, e.AssetId),
                                                          HttpStatusCode.Conflict, Response.InvalidAsperaTransfer_AssetIsBeingArchived,
                                                          Response.InvalidAssetStateCode, controllerName: "AsperaDownloadController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnAssetBeingArchivedException>(Response.InvalidAsperaTransfer_AssetIsBeingArchived,
                                                          (e, c) => GetExtraInformation(c, e.AssetId),
                                                          HttpStatusCode.Conflict, Response.InvalidAsperaTransfer_AssetIsBeingArchived,
                                                          Response.InvalidAssetStateCode, controllerName: "AsperaBulkDownloadController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnAssetBeingArchivedException>(Response.InvalidAsperaTransfer_AssetIsBeingArchived,
                                                          (e, c) => GetExtraInformation(c, e.AssetId),
                                                          HttpStatusCode.Conflict, Response.InvalidAsperaTransfer_AssetIsBeingArchived,
                                                          Response.InvalidAssetStateCode, controllerName: "AsperaTransfersController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnAssetBeingArchivedException>(Response.InvalidRestoreOperation_AssetIsBeingArchived,
                                                          (e, c) => GetExtraInformation(c, e.AssetId),
                                                          HttpStatusCode.Conflict, Response.InvalidRestoreOperation_AssetIsBeingArchived,
                                                          Response.InvalidAssetStateCode, controllerName: "RestoreAssetController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnAssetBeingArchivedException>(Response.InvalidRestoreOperation_AssetIsBeingArchived,
                                                          (e, c) => GetExtraInformation(c, e.AssetId),
                                                          HttpStatusCode.Conflict, Response.InvalidRestoreOperation_AssetIsBeingArchived,
                                                          Response.InvalidAssetStateCode, controllerName: "BulkRestoreController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnAssetBeingArchivedException>(Response.InvalidCiJobRequest_ArchiveInProgress,
                                              (e, c) => GetExtraInformation(c, e.AssetId),
                                              HttpStatusCode.Conflict, Response.InvalidCiJobRequest_ArchiveInProgress,
                                              Response.InvalidAssetStateCode, controllerName: "CiJobsController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnAssetBeingRestoredException>(Response.InvalidAsperaTransfer_AssetIsBeingRestored,
                                                          (e, c) => GetExtraInformation(c, e.AssetId),
                                                          HttpStatusCode.Conflict, Response.InvalidAsperaTransfer_AssetIsBeingRestored,
                                                          Response.InvalidAssetStateCode, controllerName: "AsperaDownloadController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnAssetBeingRestoredException>(Response.InvalidAsperaTransfer_AssetIsBeingRestored,
                                                          (e, c) => GetExtraInformation(c, e.AssetId),
                                                          HttpStatusCode.Conflict, Response.InvalidAsperaTransfer_AssetIsBeingRestored,
                                                          Response.InvalidAssetStateCode, controllerName: "AsperaBulkDownloadController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnAssetBeingRestoredException>(Response.InvalidAsperaTransfer_AssetIsBeingRestored,
                                                          (e, c) => GetExtraInformation(c, e.AssetId),
                                                          HttpStatusCode.Conflict, Response.InvalidAsperaTransfer_AssetIsBeingRestored,
                                                          Response.InvalidAssetStateCode, controllerName: "AsperaTransfersController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnAssetBeingRestoredException>(Response.InvalidRestoreOperation_AssetIsBeingRestored,
                                                          (e, c) => GetExtraInformation(c, e.AssetId),
                                                          HttpStatusCode.Conflict, Response.InvalidRestoreOperation_AssetIsBeingRestored,
                                                          Response.InvalidAssetStateCode, controllerName: "RestoreAssetController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnAssetBeingRestoredException>(Response.InvalidRestoreOperation_AssetIsBeingRestored,
                                                          (e, c) => GetExtraInformation(c, e.AssetId),
                                                          HttpStatusCode.Conflict, Response.InvalidRestoreOperation_AssetIsBeingRestored,
                                                          Response.InvalidAssetStateCode, controllerName: "BulkRestoreController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnAssetBeingRestoredException>(Response.InvalidCiJobRequest_RestoreInProgress,
                                              (e, c) => GetExtraInformation(c, e.AssetId),
                                              HttpStatusCode.Conflict, Response.InvalidCiJobRequest_RestoreInProgress,
                                              Response.InvalidAssetStateCode, controllerName: "CiJobsController");


            ExceptionMappingService.RegisterMapping<InvalidOperationOnAssetWithArchiveBeingCanceledException>(Response.InvalidArchiveOperation_AssetArchiveIsBeingCanceled,
                                                          (e, c) => GetExtraInformation(c, e.AssetId),
                                                          HttpStatusCode.Conflict, Response.InvalidArchiveOperation_AssetArchiveIsBeingCanceled,
                                                          Response.InvalidAssetStateCode);

            ExceptionMappingService.RegisterMapping<AssetAlreadyArchivedException>(Response.AssetAlreadyArchived,
                                                          (e, c) => GetExtraInformation(c, e.AssetId),
                                                          HttpStatusCode.Conflict, Response.AssetAlreadyArchived,
                                                          Response.InvalidAssetStateCode);


            ExceptionMappingService.RegisterMapping<AssetNotUploadingException>(Response.InvalidAssetStatus,
                                                          (e, c) => GetExtraInformation(c, e.AssetId),
                                                          HttpStatusCode.Conflict, Response.InvalidAssetStatus,
                                                          Response.InvalidAssetStatusCode);

            ExceptionMappingService.RegisterMapping<AssetCreatorException>(Response.ForbiddenOperationOnAsset,
                                                         (e, c) => GetExtraInformation(c, e.AssetId),
                                                         HttpStatusCode.Forbidden, Response.ForbiddenOperationOnAsset,
                                                         Response.ForbiddenOperationOnAssetCode);

            ExceptionMappingService.RegisterMapping<InvalidUploadingFailedRequestException>(Response.InvalidUploadingFailedRequest,
                                                         (e, c) => GetExtraInformation(c, e.Details),
                                                         HttpStatusCode.BadRequest, Response.InvalidUploadingFailedRequest,
                                                         Response.InvalidUploadingFailedRequestCode);

            ExceptionMappingService.RegisterMapping<AssetNotUploadedException>(Response.InvalidDownload_AssetIsNotAvailable,
                                                          (e, c) => GetExtraInformation(c, e.AssetId),
                                                          HttpStatusCode.Conflict, Response.InvalidDownload_AssetIsNotAvailable,
                                                          Response.InvalidAssetStateCode);

            ExceptionMappingService.RegisterMapping<ElementNotUploadedException>(Response.InvalidDownload_ElementIsNotAvailable,
                                                          (e, c) => GetExtraInformationWithElementId(c, e.ElementId),
                                                          HttpStatusCode.Conflict, Response.InvalidDownload_ElementIsNotAvailable,
                                                          Response.InvalidFileStateCode);

            ExceptionMappingService.RegisterMapping<AssetNotUploadedException>(Response.InvalidArchiveOperation_AssetNotUploaded,
                                                          (e, c) => GetExtraInformation(c, e.AssetId),
                                                          HttpStatusCode.Conflict, Response.InvalidArchiveOperation_AssetNotUploaded,
                                                          Response.InvalidAssetStateCode, controllerName: "ArchiveController");

            ExceptionMappingService.RegisterMapping<AssetNotUploadedException>(Response.InvalidArchiveOperation_AssetNotUploaded,
                                                          (e, c) => GetExtraInformation(c, e.AssetId),
                                                          HttpStatusCode.Conflict, Response.InvalidArchiveOperation_AssetNotUploaded,
                                                          Response.InvalidAssetStateCode, controllerName: "BulkArchiveController");

            ExceptionMappingService.RegisterMapping<AssetNotUploadedException>(Response.InvalidCiJobRequest_AssetNotUploaded,
                                              (e, c) => GetExtraInformation(c, e.AssetId),
                                              HttpStatusCode.Conflict, Response.InvalidCiJobRequest_AssetNotUploaded,
                                              Response.InvalidAssetStateCode, controllerName: "CiJobsController");


            ExceptionMappingService.RegisterMapping<AssetNotArchivableException>(Response.InvalidArchiveOperation_AssetNotArchivable,
                                                          (e, c) => GetExtraInformation(c, e.AssetId),
                                                          HttpStatusCode.InternalServerError, Response.InvalidArchiveOperation_AssetNotArchivable,
                                                          Response.InvalidAssetStateCode, LogLevel.Error);

            ExceptionMappingService.RegisterMapping<InvalidOperationOnDeletedFileException>(
                Response.InvalidOperationOnDeletedAsset,
                (e, c) => GetExtraInformationForFileOperations(c, e.FileId, e.FileType),
                HttpStatusCode.NotFound, Response.InvalidOperationOnDeletedAsset,
                Response.AssetDeletedCode);

            ExceptionMappingService.RegisterMapping<InvalidOperationOnDeletedFileException>(
                Response.InvalidOperationOnDeletedAsset,
                (e, c) => GetExtraInformationForFileOperations(c, e.FileId, e.FileType),
                HttpStatusCode.BadRequest, Response.InvalidOperationOnDeletedAsset,
                Response.AssetDeletedCode, controllerName: "MediaboxController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnDeletedFileException>(
                Response.InvalidOperationOnDeletedAsset,
                (e, c) => GetExtraInformationForFileOperations(c, e.FileId, e.FileType),
                HttpStatusCode.BadRequest, Response.InvalidOperationOnDeletedAsset,
                Response.AssetDeletedCode, controllerName: "MediaboxesController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnDeletedFileException>(
                Response.InvalidOperationOnDeletedElement,
                (e, c) => GetExtraInformationForFileOperations(c, e.FileId, e.FileType),
                HttpStatusCode.NotFound, Response.InvalidOperationOnDeletedElement,
                Response.ElementDeletedCode, controllerName: "ElementMultipartUploadManifestController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnDeletedFileException>(
                Response.InvalidOperationOnDeletedAsset,
                (e, c) => GetExtraInformationForFileOperations(c, e.FileId, e.FileType),
                HttpStatusCode.BadRequest, Response.InvalidOperationOnDeletedAsset,
                Response.AssetDeletedCode, controllerName: "ElementMultipartUploadController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnDeletedFileException>(
                Response.InvalidOperationOnDeletedAsset,
                (e, c) => GetExtraInformationForFileOperations(c, e.FileId, e.FileType),
                HttpStatusCode.BadRequest, Response.InvalidOperationOnDeletedAsset,
                Response.AssetDeletedCode, controllerName: "ElementSinglePartUploadController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnDeletedFileException>(
                Response.InvalidOperationOnDeletedElement,
                (e, c) => GetExtraInformationForFileOperations(c, e.FileId, e.FileType),
                HttpStatusCode.BadRequest, Response.InvalidOperationOnDeletedElement,
                Response.ElementDeletedCode, controllerName: "ElementCiJobsController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnTrashedFileException>(
                Response.InvalidOperationOnTrashedAsset,
                (e, c) => GetExtraInformationForFileOperations(c, e.FileId, e.FileType),
                HttpStatusCode.Conflict, Response.InvalidOperationOnTrashedAsset,
                Response.AssetTrashedCode);

            ExceptionMappingService.RegisterMapping<InvalidOperationOnTrashedFileException>(
                Response.InvalidOperationOnTrashedElement,
                (e, c) => GetExtraInformationForFileOperations(c, e.FileId, e.FileType),
                HttpStatusCode.Conflict, Response.InvalidOperationOnTrashedElement,
                Response.ElementTrashedCode, controllerName: "ElementMultipartUploadManifestController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnAssetException>(
                Response.AssetNotReady,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.AssetNotReady,
                Response.AssetNotReadyCode);

            ExceptionMappingService.RegisterMapping<InvalidOperationOnElementException>(
                Response.ElementNotReadyForCiJobRequest,
                (e, c) => GetExtraInformationWithElementId(c, e.ElementId),
                HttpStatusCode.BadRequest,
                Response.ElementNotReadyForCiJobRequest,
                Response.ElementNotReadyCode);

            ExceptionMappingService.RegisterMapping<InvalidOperationOnWorkspaceAssetException>(
                Response.InvalidOperationOnWorkspaceAsset,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidOperationOnWorkspaceAsset,
                Response.InvalidOperationOnWorkspaceAssetCode);

            ExceptionMappingService.RegisterMapping<ChecksumMismatchException>(Response.ChecksumMismatch,
                                                          (e, c) => GetExtraInformationForChecksumMismatchException(c, e.AssetId, e.ProvidedChecksumValue, e.CalculatedChecksumValue),
                                                          HttpStatusCode.Conflict, Response.ChecksumMismatch,
                                                          Response.ChecksumMismatchCode, LogLevel.Error);

            ExceptionMappingService.RegisterMapping<AssetNotPartOfWorkspaceException>("Asset not part of workspace.",
                                                          (e, c) => GetExtraInformationIncludingWorkspaceId(c, e.AssetId, e.WorkspaceId),
                                                          HttpStatusCode.InternalServerError, Response.AssetNotFound,
                                                          Response.AssetNotFoundCode, LogLevel.Error);

            ExceptionMappingService.RegisterMapping<AsperaNotEnabledForWorkspaceException>(Response.AsperaNotEnabled,
                                                          (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                                                          HttpStatusCode.Conflict, Response.AsperaNotEnabled,
                                                          Response.EntitlementRequiredCode);

            ExceptionMappingService.RegisterMapping<InvalidWorkspaceException>(Response.BulkCreateAsset_InvalidWorkspaceCount,
                                                          (e, c) => GetExtraInformationWithMessage(c, e.Message),
                                                          HttpStatusCode.BadRequest, Response.BulkCreateAsset_InvalidWorkspaceCount,
                                                          Response.InvalidOperationOnWorkspaceCode);

            ExceptionMappingService.RegisterMapping<AsperaRestClientException>(Response.AsperaConnectionFailed,
                                                          (e, c) => GetExtraInformationForAsperaException(c, e.AsperaHosts, e.AsperaUserName),
                                                          HttpStatusCode.InternalServerError, Response.AsperaConnectionFailed,
                                                          Response.UnhandledExceptionCode, LogLevel.Error);

            ExceptionMappingService.RegisterMapping<AsperaSoapClientException>(Response.AsperaConnectionFailed,
                                                          (e, c) => GetExtraInformationForAsperaException(c, e.AsperaHosts, null),
                                                          HttpStatusCode.InternalServerError, Response.AsperaConnectionFailed,
                                                          Response.UnhandledExceptionCode, LogLevel.Error);

            ExceptionMappingService.RegisterMapping<InvalidOperationOnArchivedAssetException>(Response.InvalidAsperaTransfer_AssetArchivedNotRestored,
                                                          (e, c) => GetExtraInformation(c, e.AssetId),
                                                          HttpStatusCode.Conflict, Response.InvalidAsperaTransfer_AssetArchivedNotRestored,
                                                          Response.InvalidAssetStateCode, controllerName: "AsperaDownloadController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnArchivedAssetException>(Response.InvalidAsperaTransfer_AssetArchivedNotRestored,
                                                          (e, c) => GetExtraInformation(c, e.AssetId),
                                                          HttpStatusCode.Conflict, Response.InvalidAsperaTransfer_AssetArchivedNotRestored,
                                                          Response.InvalidAssetStateCode, controllerName: "AsperaBulkDownloadController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnArchivedAssetException>(Response.InvalidAsperaTransfer_AssetArchivedNotRestored,
                                                          (e, c) => GetExtraInformation(c, e.AssetId),
                                                          HttpStatusCode.Conflict, Response.InvalidAsperaTransfer_AssetArchivedNotRestored,
                                                          Response.InvalidAssetStateCode, controllerName: "AsperaTransfersController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnArchivedAssetException>(Response.CancelAssetArchiveFailed_Archived,
                                                              (e, c) => GetExtraInformation(c, e.AssetId),
                                                              HttpStatusCode.Conflict, Response.CancelAssetArchiveFailed_Archived,
                                                              Response.InvalidAssetStateCode, controllerName: "CancelArchiveController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnArchivedAssetException>(Response.CancelAssetArchiveFailed_Archived,
                                                              (e, c) => GetExtraInformation(c, e.AssetId),
                                                              HttpStatusCode.Conflict, Response.CancelAssetArchiveFailed_Archived,
                                                              Response.InvalidAssetStateCode, controllerName: "BulkCancelArchiveController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnArchivedAssetException>(Response.InvalidCiJobRequest_Archived,
                                                  (e, c) => GetExtraInformation(c, e.AssetId),
                                                  HttpStatusCode.Conflict, Response.InvalidCiJobRequest_Archived,
                                                  Response.InvalidAssetStateCode, controllerName: "CiJobsController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnRestoredAssetException>(Response.InvalidCiJobRequest_RestoreExpiresLessThan24Hours,
                                                  (e, c) => GetExtraInformation(c, e.AssetId),
                                                  HttpStatusCode.Conflict, Response.InvalidCiJobRequest_RestoreExpiresLessThan24Hours,
                                                  Response.InvalidAssetStateCode, controllerName: "CiJobsController");

            ExceptionMappingService.RegisterMapping<InsufficientArchiveStorageAvailableException>(Response.InsufficientArchiveStorageAvailable,
                                      (e, c) => GetExtraInformation(c, e.AssetId),
                                      HttpStatusCode.Conflict, Response.InsufficientArchiveStorageAvailable,
                                      Response.InsufficientArchiveStorageAvailableCode);

            ExceptionMappingService.RegisterMapping<InvalidOperationOnNotArchivedAssetException>(Response.CancelAssetArchiveFailed_NotArchived,
                                                              (e, c) => GetExtraInformation(c, e.AssetId),
                                                              HttpStatusCode.Conflict, Response.CancelAssetArchiveFailed_NotArchived,
                                                              Response.InvalidAssetStateCode);

            ExceptionMappingService.RegisterMapping<InvalidSourcePathException>(Response.InvalidAssetUri,
                                                          (e, c) => GetExtraInformation(c, e.AssetId),
                                                          HttpStatusCode.Conflict, Response.InvalidAssetUri,
                                                          Response.InvalidAssetUriCode);

            ExceptionMappingService.RegisterMapping<FileNotUploadableException>(Response.AssetCannotBeUploaded,
                (e, c) => GetExtraInformationForFileOperations(c, e.FileId, e.FileType),
                HttpStatusCode.Conflict, Response.AssetCannotBeUploaded,
                Response.InvalidAssetStateCode, controllerName: "AssetSinglePartUploadController");

            ExceptionMappingService.RegisterMapping<FileNotUploadableException>(Response.AssetCannotBeUploaded,
                (e, c) => GetExtraInformationForFileOperations(c, e.FileId, e.FileType),
                HttpStatusCode.Conflict, Response.AssetCannotBeUploaded,
                Response.InvalidAssetStateCode, controllerName: "AssetMultipartUploadController");

            ExceptionMappingService.RegisterMapping<FileNotUploadableException>(Response.FileCannotBeUploaded,
                (e, c) => GetExtraInformationForFileOperations(c, e.FileId, e.FileType),
                HttpStatusCode.Conflict, Response.FileCannotBeUploaded,
                Response.InvalidFileStateCode, controllerName: "ElementSinglePartUploadController");

            ExceptionMappingService.RegisterMapping<FileNotUploadableException>(Response.FileCannotBeUploaded,
                (e, c) => GetExtraInformationForFileOperations(c, e.FileId, e.FileType),
                HttpStatusCode.Conflict, Response.FileCannotBeUploaded,
                Response.InvalidFileStateCode, controllerName: "ElementMultipartUploadController");

            ExceptionMappingService.RegisterMapping<ElementUploadNotAllowedOnAssetException>(Response.ElementUploadNotAllowedOnAsset,
                (e, c) => GetExtraInformationForFileOperations(c, e.FileId, e.FileType),
                HttpStatusCode.BadRequest, Response.ElementUploadNotAllowedOnAsset,
                Response.ElementUploadNotAllowedOnAssetCode);

            ExceptionMappingService.RegisterMapping<InvalidRequestException>(Response.InvalidRequest,
                                                          (e, c) => GetExtraInformationWithNoAssetId(c),
                                                          HttpStatusCode.BadRequest, Response.InvalidRequest,
                                                          Response.InvalidRequestCode);

            ExceptionMappingService.RegisterMapping<InvalidFileNameException>(Response.InvalidFileName,
                                                          (e, c) => GetExtraInformationForInvalidFileName(c, e.FileName),
                                                          HttpStatusCode.BadRequest, Response.InvalidFileName,
                                                          Response.MissingOrInvalidNameCode);

            ExceptionMappingService.RegisterMapping<InvalidSourceFileUrlException>(Response.InvalidSourceFileUrl,
                                                          (e, c) => GetExtraInformationForInvalidImportUrl(c, e.Url),
                                                          HttpStatusCode.BadRequest, Response.InvalidSourceFileUrl,
                                                          Response.InvalidSourceFileUrlCode);

            ExceptionMappingService.RegisterMapping<InvalidFolderNameException>(Response.MissingOrInvalidName,
                                                          (e, c) => GetExtraInformationForFolder(c, e.FolderName),
                                                          HttpStatusCode.BadRequest, Response.MissingOrInvalidName,
                                                          Response.MissingOrInvalidNameCode);

            ExceptionMappingService.RegisterMapping<InvalidFileSizeException>(Response.MissingOrInvalidFileSize,
                                                          (e, c) => GetExtraInformationForInvalidFileSize(c, e.Size),
                                                          HttpStatusCode.BadRequest, Response.MissingOrInvalidFileSize,
                                                          Response.MissingOrInvalidFileSizeCode);

            ExceptionMappingService.RegisterMapping<InvalidFileTypeException>(Response.InvalidFileType,
                                                          (e, c) => GetExtraInformationForInvalidFileName(c, e.FileName),
                                                          HttpStatusCode.BadRequest, Response.InvalidFileType,
                                                          Response.InvalidFileTypeCode);

            ExceptionMappingService.RegisterMapping<InsufficientSpaceAvailableException>(Response.InsufficientSpaceAvailable,
                                                          (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                                                          HttpStatusCode.Conflict, Response.InsufficientSpaceAvailable,
                                                          Response.InsufficientSpaceAvailableCode);

            ExceptionMappingService.RegisterMapping<InsufficientSpaceAvailableException>(Response.InsufficientSpaceAvailableForCopy,
                                              (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                                              HttpStatusCode.Conflict, Response.InsufficientSpaceAvailableForCopy,
                                              Response.InsufficientSpaceAvailableCode, controllerName: "BulkCopyAssetController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnArchivedAssetException>(Response.InvalidAssetStateCode_BulkCopy,
                                              (e, c) => GetExtraInformation(c, e.AssetId),
                                              HttpStatusCode.Conflict, Response.InvalidAssetStateCode_BulkCopy,
                                              Response.InvalidAssetStateCode, controllerName: "BulkCopyAssetController");

            ExceptionMappingService.RegisterMapping<WorkspaceNotFoundException>(Response.WorkspaceNotFound,
                                                          (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId, e.AccessCode),
                                                          HttpStatusCode.BadRequest, Response.WorkspaceNotFound,
                                                          Response.WorkspaceNotFoundCode, LogLevel.Error);

            ExceptionMappingService.RegisterMapping<WorkspaceAccessDeniedException>("Access denied to Workspace.",
                                                          (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                                                          HttpStatusCode.BadRequest, Response.WorkspaceNotFound,
                                                          Response.WorkspaceNotFoundCode);

            ExceptionMappingService.RegisterMapping<WorkspaceAccessDeniedException>("Access denied to Workspace.",
                                                          (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                                                          HttpStatusCode.NotFound, Response.WorkspaceNotFound,
                                                          Response.WorkspaceNotFoundCode, controllerName: "EventsController");

            ExceptionMappingService.RegisterMapping<WorkspaceAccessDeniedException>("Access denied to Workspace.",
                                                          (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                                                          HttpStatusCode.NotFound, Response.WorkspaceNotFound,
                                                          Response.WorkspaceNotFoundCode, controllerName: "MetadataTemplatesController");

            ExceptionMappingService.RegisterMapping<WorkspaceNotFoundException>(Response.WorkspaceNotFound,
                                                          (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                                                          HttpStatusCode.NotFound, Response.WorkspaceNotFound,
                                                          Response.WorkspaceNotFoundCode, controllerName: "WorkspaceContentsController");

            ExceptionMappingService.RegisterMapping<WorkspaceAccessDeniedException>("Access denied to Workspace.",
                                                          (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                                                          HttpStatusCode.NotFound, Response.WorkspaceNotFound,
                                                          Response.WorkspaceNotFoundCode, controllerName: "WorkspaceContentsController");

            ExceptionMappingService.RegisterMapping<WorkspaceNotFoundException>(
                Response.WorkspaceNotFound,
                (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                HttpStatusCode.NotFound, Response.WorkspaceNotFound,
                Response.WorkspaceNotFoundCode, controllerName: "WorkspaceFavoritesController");

            ExceptionMappingService.RegisterMapping<WorkspaceAccessDeniedException>(
                "Access denied to Workspace.",
                (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                HttpStatusCode.NotFound, Response.WorkspaceNotFound,
                Response.WorkspaceNotFoundCode, controllerName: "WorkspaceFavoritesController");

            ExceptionMappingService.RegisterMapping<WorkspaceNotFoundException>(Response.WorkspaceNotFound,
                                                          (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                                                          HttpStatusCode.NotFound, Response.WorkspaceNotFound,
                                                          Response.WorkspaceNotFoundCode, controllerName: "TrashBinController");

            ExceptionMappingService.RegisterMapping<WorkspaceAccessDeniedException>("Access denied to Workspace.",
                                                          (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                                                          HttpStatusCode.NotFound, Response.WorkspaceNotFound,
                                                          Response.WorkspaceNotFoundCode, controllerName: "TrashBinController");

            ExceptionMappingService.RegisterMapping<WorkspaceNotFoundException>(Response.WorkspaceNotFound,
                                                           (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                                                           HttpStatusCode.NotFound, Response.WorkspaceNotFound,
                                                           Response.WorkspaceNotFoundCode, controllerName: "WorkspaceController");

            ExceptionMappingService.RegisterMapping<WorkspaceAccessDeniedException>("Access denied to Workspace.",
                                                          (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                                                          HttpStatusCode.NotFound, Response.WorkspaceNotFound,
                                                          Response.WorkspaceNotFoundCode, controllerName: "WorkspaceController");

            ExceptionMappingService.RegisterMapping<WorkspaceAccessDeniedException>("Access denied to Workspace.",
                                                          (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                                                          HttpStatusCode.NotFound, Response.WorkspaceNotFound,
                                                          Response.WorkspaceNotFoundCode, controllerName: "WorkspaceAccessController");

            ExceptionMappingService.RegisterMapping<WorkspaceNotFoundException>(Response.WorkspaceNotFound,
                                                          (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                                                          HttpStatusCode.NotFound, Response.WorkspaceNotFound,
                                                          Response.WorkspaceNotFoundCode, controllerName: "PurgeTrashController");

            ExceptionMappingService.RegisterMapping<WorkspaceAccessDeniedException>("Access denied to Workspace.",
                                                          (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                                                          HttpStatusCode.NotFound, Response.WorkspaceNotFound,
                                                          Response.WorkspaceNotFoundCode, controllerName: "PurgeTrashController");

            ExceptionMappingService.RegisterMapping<WorkspaceNotFoundException>(Response.WorkspaceNotFound,
                                                          (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                                                          HttpStatusCode.NotFound, Response.WorkspaceNotFound,
                                                          Response.WorkspaceNotFoundCode, controllerName: "WorkspaceEventsController");

            ExceptionMappingService.RegisterMapping<WorkspaceAccessDeniedException>("Access denied to Workspace.",
                                                          (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                                                          HttpStatusCode.NotFound, Response.WorkspaceNotFound,
                                                          Response.WorkspaceNotFoundCode, controllerName: "WorkspaceEventsController");

            ExceptionMappingService.RegisterMapping<WorkspaceNotFoundException>(Response.WorkspaceNotFound,
                                                          (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                                                          HttpStatusCode.NotFound, Response.WorkspaceNotFound,
                                                          Response.WorkspaceNotFoundCode, controllerName: "WorkspaceAssetsMetadataController");

            ExceptionMappingService.RegisterMapping<WorkspaceAccessDeniedException>("Access denied to Workspace.",
                                                          (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                                                          HttpStatusCode.NotFound, Response.WorkspaceNotFound,
                                                          Response.WorkspaceNotFoundCode, controllerName: "WorkspaceAssetsMetadataController");

            ExceptionMappingService.RegisterMapping<WorkspaceNotFoundException>(Response.WorkspaceNotFound,
                                                          (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                                                          HttpStatusCode.NotFound, Response.WorkspaceNotFound,
                                                          Response.WorkspaceNotFoundCode, controllerName: "SearchWorkspaceController");

            ExceptionMappingService.RegisterMapping<WorkspaceAccessDeniedException>("Access denied to Workspace.",
                                                          (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                                                          HttpStatusCode.NotFound, Response.WorkspaceNotFound,
                                                          Response.WorkspaceNotFoundCode, controllerName: "SearchWorkspaceController");

            ExceptionMappingService.RegisterMapping<WorkspaceNotFoundException>(Response.WorkspaceNotFound,
                                                          (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                                                          HttpStatusCode.BadRequest, Response.WorkspaceNotFound,
                                                          Response.WorkspaceNotFoundCode, controllerName: "SearchUserContentsController");

            ExceptionMappingService.RegisterMapping<WorkspaceAccessDeniedException>("Access denied to Workspace.",
                                                          (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                                                          HttpStatusCode.BadRequest, Response.WorkspaceNotFound,
                                                          Response.WorkspaceNotFoundCode, controllerName: "SearchUserContentsController");

            ExceptionMappingService.RegisterMapping<WorkspaceNotFoundException>(Response.WorkspaceNotFound,
                                                          (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                                                          HttpStatusCode.BadRequest, Response.WorkspaceNotFound,
                                                          Response.WorkspaceNotFoundCode, controllerName: "FacetedSearchUserContentsController");

            ExceptionMappingService.RegisterMapping<WorkspaceAccessDeniedException>("Access denied to Workspace.",
                                                          (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                                                          HttpStatusCode.BadRequest, Response.WorkspaceNotFound,
                                                          Response.WorkspaceNotFoundCode, controllerName: "FacetedSearchUserContentsController");

            ExceptionMappingService.RegisterMapping<WorkspaceNotFoundException>(Response.WorkspaceNotFound,
                                                          (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                                                          HttpStatusCode.NotFound, Response.WorkspaceNotFound,
                                                          Response.WorkspaceNotFoundCode, controllerName: "WorkspaceMediaboxesController");

            ExceptionMappingService.RegisterMapping<WorkspaceAccessDeniedException>("Access denied.",
                                                          (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                                                          HttpStatusCode.NotFound, Response.WorkspaceNotFound,
                                                          Response.WorkspaceNotFoundCode, controllerName: "WorkspaceMediaboxesController");

            ExceptionMappingService.RegisterMapping<WorkspaceAccessDeniedException>(Response.WorkspaceNotFound,
                (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                HttpStatusCode.NotFound, Response.WorkspaceNotFound,
                Response.WorkspaceNotFoundCode, controllerName: "CreatorsCloudWorkspaceDetailsController");

            ExceptionMappingService.RegisterMapping<ExceededDataTransferLimitException>(Response.ExceededDataTransferLimit,
                                                                    (e, c) => GetExtraInformationIncludingDataTransferOperationInfo(c, e.TransferSize, e.TransferLimit, e.TransferType),
                                                                    HttpStatusCode.BadRequest, Response.ExceededDataTransferLimit,
                                                                    Response.ExceededDataTransferLimitCode);

            ExceptionMappingService.RegisterMapping<FolderNotFoundException>(
                Response.FolderNotFound,
                (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                HttpStatusCode.BadRequest, Response.FolderNotFound,
                Response.FolderNotFoundCode);

            ExceptionMappingService.RegisterMapping<FolderNotFoundException>(
                Response.FolderNotFound,
                (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                HttpStatusCode.NotFound, Response.FolderNotFound,
                Response.FolderNotFoundCode, controllerName: "FolderContentsController");

            ExceptionMappingService.RegisterMapping<FolderNotFoundException>(
                Response.FolderNotFound,
                (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                HttpStatusCode.NotFound, Response.FolderNotFound,
                Response.FolderNotFoundCode, controllerName: "FolderController");

            ExceptionMappingService.RegisterMapping<FolderNotFoundException>(
                Response.FolderNotFound,
                (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                HttpStatusCode.NotFound, Response.FolderNotFound,
                Response.FolderNotFoundCode, controllerName: "FolderTreeController");

            ExceptionMappingService.RegisterMapping<FolderNotFoundException>(
                Response.FolderNotFound,
                (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                HttpStatusCode.NotFound, Response.FolderNotFound,
                Response.FolderNotFoundCode, controllerName: "FolderDownloadController");

            ExceptionMappingService.RegisterMapping<FolderNotFoundException>(
                Response.FolderNotFound,
                (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                HttpStatusCode.NotFound, Response.FolderNotFound,
                Response.FolderNotFoundCode, controllerName: "TrashFolderController");

            ExceptionMappingService.RegisterMapping<FolderNotFoundException>(
                Response.FolderNotFound,
                (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                HttpStatusCode.NotFound, Response.FolderNotFound,
                Response.FolderNotFoundCode, controllerName: "ArchiveFolderController");

            ExceptionMappingService.RegisterMapping<FolderNotFoundException>(
                Response.FolderNotFound,
                (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                HttpStatusCode.NotFound, Response.FolderNotFound,
                Response.FolderNotFoundCode, controllerName: "RestoreFolderController");

            ExceptionMappingService.RegisterMapping<FolderNotFoundException>(
                Response.FolderNotFound,
                (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                HttpStatusCode.NotFound, Response.FolderNotFound,
                Response.FolderNotFoundCode,
                controllerName: "FolderAclController");

            ExceptionMappingService.RegisterMapping<FolderNotFoundException>(
                Response.FolderNotFound,
                (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                HttpStatusCode.NotFound, Response.FolderNotFound,
                Response.FolderNotFoundCode,
                controllerName: "CatalogAclSuggestController");

            ExceptionMappingService.RegisterMapping<FolderNotFoundException>(
                Response.FolderNotFound,
                (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                HttpStatusCode.NotFound, Response.FolderNotFound,
                Response.FolderNotFoundCode, controllerName: "AsperaFolderDownloadController");

            ExceptionMappingService.RegisterMapping<FolderAccessDeniedException>("Access to folder denied.",
                                                  (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                                                  HttpStatusCode.BadRequest, Response.FolderNotFound,
                                                  Response.FolderNotFoundCode);

            ExceptionMappingService.RegisterMapping<FolderAccessDeniedException>("Access to folder denied.",
                                                          (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                                                          HttpStatusCode.NotFound, Response.FolderNotFound,
                                                          Response.FolderNotFoundCode, controllerName: "FolderContentsController");

            ExceptionMappingService.RegisterMapping<FolderAccessDeniedException>("Access to folder denied.",
                                                          (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                                                          HttpStatusCode.NotFound, Response.FolderNotFound,
                                                          Response.FolderNotFoundCode, controllerName: "FolderController");

            ExceptionMappingService.RegisterMapping<FolderAccessDeniedException>("Access to folder denied.",
                                                          (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                                                          HttpStatusCode.NotFound, Response.FolderNotFound,
                                                          Response.FolderNotFoundCode, controllerName: "TrashFolderController");

            ExceptionMappingService.RegisterMapping<FolderAccessDeniedException>(
                "Access to folder denied.",
                (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                HttpStatusCode.NotFound, Response.FolderNotFound,
                Response.FolderNotFoundCode, controllerName: "ArchiveFolderController");

            ExceptionMappingService.RegisterMapping<FolderAccessDeniedException>(
                "Access to folder denied.",
                (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                HttpStatusCode.NotFound, Response.FolderNotFound,
                Response.FolderNotFoundCode, controllerName: "RestoreFolderController");

            ExceptionMappingService.RegisterMapping<FolderAccessDeniedException>(
                "Access to folder denied.",
                (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                HttpStatusCode.NotFound, Response.FolderNotFound,
                Response.FolderNotFoundCode, controllerName: "MediaboxFolderContentsController");

            ExceptionMappingService.RegisterMapping<ExpeditedRestoreNotEntitledException>(
                Response.ExpeditedRestoresNotEnabled,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Conflict,
                Response.ExpeditedRestoresNotEnabled,
                Response.EntitlementRequiredCode);

            ExceptionMappingService.RegisterMapping<FolderAccessDeniedException>("Access to folder denied.",
                                              (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                                              HttpStatusCode.NotFound, Response.FolderNotFound,
                                              Response.FolderNotFoundCode, controllerName: "AsperaFolderDownloadController");

            ExceptionMappingService.RegisterMapping<FolderNotPartOfWorkspaceException>(Response.FolderNotMemberOfWorkspace,
                                                  (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                                                  HttpStatusCode.BadRequest, Response.FolderNotMemberOfWorkspace,
                                                  Response.FolderNotMemberOfWorkspaceCode);

            ExceptionMappingService.RegisterMapping<ObjectStorageException>(Response.ObjectStorageException,
                                                          (e, c) => GetExtraInformationForObjectStorageException(c, e.BucketName, e.ObjectKey),
                                                          HttpStatusCode.InternalServerError, Response.ObjectStorageException,
                                                          Response.UnhandledExceptionCode, LogLevel.Error);

            ExceptionMappingService.RegisterMapping<FileTooSmallForMultipartUploadException>(Response.InvalidMultipartUpload_FileTooSmall,
                                                          (e, c) => GetExtraInformationForInvalidFileSize(c, e.Size),
                                                          HttpStatusCode.BadRequest, Response.InvalidMultipartUpload_FileTooSmall,
                                                          Response.AssetTooSmallCode);

            ExceptionMappingService.RegisterMapping<FileTooSmallForMultipartUploadException>(Response.InvalidMultipartUpload_FileTooSmall,
                                              (e, c) => GetExtraInformationForInvalidFileSize(c, e.Size),
                                              HttpStatusCode.BadRequest, Response.InvalidMultipartUpload_FileTooSmall,
                                              Response.ElementTooSmallCode, controllerName: "ElementMultipartUploadController");

            ExceptionMappingService.RegisterMapping<FileTooLargeForMultipartUploadException>(Response.InvalidMultipartUpload_FileTooLarge,
                                                          (e, c) => GetExtraInformationForInvalidFileSize(c, e.Size),
                                                          HttpStatusCode.BadRequest, Response.InvalidMultipartUpload_FileTooLarge,
                                                          Response.AssetTooLargeCode);

            ExceptionMappingService.RegisterMapping<FileTooLargeForMultipartUploadException>(Response.InvalidMultipartUpload_FileTooLarge,
                                              (e, c) => GetExtraInformationForInvalidFileSize(c, e.Size),
                                              HttpStatusCode.BadRequest, Response.InvalidMultipartUpload_FileTooLarge,
                                              Response.ElementTooLargeCode, controllerName: "ElementMultipartUploadController");

            ExceptionMappingService.RegisterMapping<PartSizeTooSmallForFileSizeException>(Response.InvalidMultipartUpload_PartSizeTooSmall,
                                                          (e, c) => GetExtraInformationForSmallPartSize(c, e.PartSize, e.Size),
                                                          HttpStatusCode.BadRequest, Response.InvalidMultipartUpload_PartSizeTooSmall,
                                                          Response.AssetPartSizeTooSmallCode);

            ExceptionMappingService.RegisterMapping<PartSizeTooSmallForFileSizeException>(Response.InvalidMultipartUpload_PartSizeTooSmall,
                                                          (e, c) => GetExtraInformationForSmallPartSize(c, e.PartSize, e.Size),
                                                          HttpStatusCode.BadRequest, Response.InvalidMultipartUpload_PartSizeTooSmall,
                                                          Response.ElementPartSizeTooSmallCode, controllerName: "ElementMultipartUploadController");

            ExceptionMappingService.RegisterMapping<MissingOrInvalidLiveStreamInputTypeException>(Response.InvalidLiveStreamUpload_MissingOrInvalidInputType,
                                                          (e, c) => GetExtraInformationForInvalidLiveStreamInputType(c, e.InputType),
                                                          HttpStatusCode.BadRequest, Response.InvalidLiveStreamUpload_MissingOrInvalidInputType,
                                                          Response.MissingOrInvalidLiveStreamInputTypeCode, controllerName: "AssetLiveStreamUploadController");

            ExceptionMappingService.RegisterMapping<MissingOrInvalidLiveStreamInputUrlException>(Response.InvalidLiveStreamUpload_MissingOrInvalidInputUrl,
                                                          (e, c) => GetExtraInformationForInvalidLiveStreamInputUrl(c),
                                                          HttpStatusCode.BadRequest, Response.InvalidLiveStreamUpload_MissingOrInvalidInputUrl,
                                                          Response.MissingOrInvalidLiveStreamInputUrlCode, controllerName: "AssetLiveStreamUploadController");

            ExceptionMappingService.RegisterMapping<LiveStreamNotAvailableException>(Response.LiveStreamNotAvailable,
                                                            (e, c) => GetExtraInformation(c, e.AssetId),
                                                            HttpStatusCode.Conflict, Response.LiveStreamNotAvailable,
                                                            Response.LiveStreamNotAvailableCode);

            ExceptionMappingService.RegisterMapping<FileManifestNotCreatedException>(Response.FileManifestNotCreated,
                                              (e, c) => GetExtraInformationForFileManifestFailure(c, e.AssetId),
                                              HttpStatusCode.InternalServerError, Response.FileManifestNotCreated,
                                              Response.FileManifestNotCreatedCode, LogLevel.Error);

            ExceptionMappingService.RegisterMapping<FileManifestUploadNotInitialized>(Response.FileManifestUploadNotInitialized,
                                              (e, c) => GetExtraInformationForFileManifestFailure(c, e.AssetId),
                                              HttpStatusCode.Conflict, Response.FileManifestUploadNotInitialized,
                                              Response.FileManifestUploadNotInitializedCode);

            ExceptionMappingService.RegisterMapping<FileManifestUploadNotInitialized>(Response.ElementManifestUploadNotInitialized,
                                              (e, c) => GetExtraInformationForFileManifestFailure(c, e.AssetId),
                                              HttpStatusCode.Conflict, Response.ElementManifestUploadNotInitialized,
                                              Response.ElementManifestUploadNotInitializedCode, controllerName: "ElementMultipartUploadManifestController");

            ExceptionMappingService.RegisterMapping<FileManifestDoesNotExistException>(Response.FileManifestDoesNotExist,
                                                         (e, c) => GetExtraInformationForFileManifestNotFound(c, e.FileId, e.ManifestUri),
                                                          HttpStatusCode.Conflict, Response.FileManifestDoesNotExist,
                                                          Response.FileManifestDoesNotExistCode);

            ExceptionMappingService.RegisterMapping<InvalidPartNumbersException>(Response.InvalidPartNumbers,
                                                         (e, c) => GetExtraInformation(c, e.AssetId),
                                                         HttpStatusCode.BadRequest,
                                                         Response.InvalidPartNumbers,
                                                         Response.InvalidRequestCode);

            ExceptionMappingService.RegisterMapping<MissingOrInvalidUploadUrlBatchRequestException>(Response.MissingOrInvalidUploadUrlBatchRequest,
                (e, c) => GetExtraInformation(c, e.AssetId), HttpStatusCode.BadRequest, Response.MissingOrInvalidUploadUrlBatchRequest,
                Response.MissingOrInvalidUploadUrlBatchRequestCode);

            ExceptionMappingService.RegisterMapping<MissingOrInvalidCompleteUploadBatchRequestException>(Response.MissingOrInvalidCompleteUploadBatchRequest,
                (e, c) => GetExtraInformation(c, e.AssetId), HttpStatusCode.BadRequest, Response.MissingOrInvalidCompleteUploadBatchRequest,
                Response.MissingOrInvalidCompleteUploadBatchRequestCode);


            ExceptionMappingService.RegisterMapping<InvalidPartNumberException>(Response.InvalidPartNumber,
                (e, c) => GetExtraInformationWithPartNumber(c, e.PartNumber),
                HttpStatusCode.BadRequest, Response.InvalidPartNumber,
                Response.InvalidPartNumberCode);

            ExceptionMappingService.RegisterMapping<InvalidPartNumberException>(Response.PartNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.PartNotFound,
                Response.InvalidRequestCode,
                controllerName: "AssetMultipartUploadManifestController");

            ExceptionMappingService.RegisterMapping<InvalidPartSizeException>(Response.InvalidPartSize,
                                                          (e, c) => GetExtraInformationWithPartSize(c, e.PartSize),
                                                          HttpStatusCode.BadRequest, Response.InvalidPartSize,
                                                          Response.InvalidPartSizeCode);

            ExceptionMappingService.RegisterMapping<InvalidTokenScopeException>(Response.InvalidAccessToken,
                                                          (e, c) => GetExtraInformationForInvalidAccessToken(c, e.Message, e.ProvidedScope, e.AcceptedScope, e.CodeId),
                                                          HttpStatusCode.Unauthorized, Response.InvalidAccessToken,
                                                          Response.InvalidAccessTokenCode, LogLevel.Error);

            ExceptionMappingService.RegisterMapping<MultipartUploadNotInitiatedException>(
                Response.UploadNotInitiatied,
                (e, c) => GetExtraInformationForFileOperations(c, e.FileId, e.FileType),
                HttpStatusCode.Conflict, Response.UploadNotInitiatied,
                Response.UploadNotIntiatedCode);

            ExceptionMappingService.RegisterMapping<MultipartUploadNotInitiatedException>(
                Response.UploadNotInitiatied,
                (e, c) => GetExtraInformationForFileOperations(c, e.FileId, e.FileType),
                HttpStatusCode.Conflict, Response.UploadNotInitiatied,
                Response.FileUploadNotIntiatedCode,
                controllerName: "ElementMultipartUploadManifestController");

            ExceptionMappingService.RegisterMapping<NoPartsUploadedException>(Response.NoPartsUploaded,
                                                              (e, c) => GetExtraInformation(c, e.AssetId),
                                                              HttpStatusCode.BadRequest, Response.NoPartsUploaded,
                                                              Response.NoPartsUploadedCode);

            ExceptionMappingService.RegisterMapping<InvalidArchivePathException>(Response.InvalidArchivePath,
                                                              (e, c) => GetExtraInformation(c, e.AssetId),
                                                              HttpStatusCode.InternalServerError, Response.InvalidArchivePath,
                                                              Response.InvalidArchivePathCode, LogLevel.Error);

            ExceptionMappingService.RegisterMapping<AssetArchiveOperationFailedException>(Response.InvalidRestoreOperation_ArchivedFailed,
                                                              (e, c) => GetExtraInformation(c, e.AssetId),
                                                              HttpStatusCode.Conflict, Response.InvalidRestoreOperation_ArchivedFailed,
                                                              Response.InvalidAssetStateCode, LogLevel.Error);

            ExceptionMappingService.RegisterMapping<AssetNotArchivedException>(Response.InvalidRestoreOperation_AssetNotArchived,
                                                              (e, c) => GetExtraInformation(c, e.AssetId),
                                                              HttpStatusCode.Conflict, Response.InvalidRestoreOperation_AssetNotArchived,
                                                              Response.InvalidAssetStateCode);

            ExceptionMappingService.RegisterMapping<FileAlreadyAvailableException>(Response.AssetAlreadyAvailableMessage,
                                                  (e, c) => GetExtraInformationForElement(c, e.FileId),
                                                  HttpStatusCode.Conflict, Response.AssetAlreadyAvailableMessage,
                                                  Response.InvalidAssetStateCode, controllerName: "AssetMultipartUploadManifestController");

            ExceptionMappingService.RegisterMapping<FileAlreadyAvailableException>(Response.AssetAlreadyAvailableMessage,
                                      (e, c) => GetExtraInformationForElement(c, e.FileId),
                                      HttpStatusCode.Conflict, Response.AssetAlreadyAvailableMessage,
                                      Response.InvalidAssetStateCode, controllerName: "AssetMultipartUploadSessionController");

            ExceptionMappingService.RegisterMapping<FileAlreadyAvailableException>(Response.AssetElementAlreadyAvailableMessage,
                                                  (e, c) => GetExtraInformationForElement(c, e.FileId),
                                                  HttpStatusCode.Conflict, Response.AssetElementAlreadyAvailableMessage,
                                                  Response.InvalidAssetElementStateCode, controllerName: "ElementMultipartUploadManifestController");

            ExceptionMappingService.RegisterMapping<FileAlreadyAvailableException>(Response.AssetElementAlreadyAvailableMessage,
                                      (e, c) => GetExtraInformationForElement(c, e.FileId),
                                      HttpStatusCode.Conflict, Response.AssetElementAlreadyAvailableMessage,
                                      Response.InvalidAssetElementStateCode, controllerName: "ElementMultipartUploadSessionController");

            ExceptionMappingService.RegisterMapping<InvalidRestoreExpiryDaysException>(
                Response.InvalidRestoreExpiryDays,
                (e, c) => GetExtraInformation(c, e.AssetId),
                HttpStatusCode.BadRequest, Response.InvalidRestoreExpiryDays,
                Response.InvalidRestoreExpiryDaysCode);

            ExceptionMappingService.RegisterMapping<InvalidRestoreRequestException>(
                Response.InvalidRestoreRequest,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidRestoreRequest,
                Response.InvalidRestoreRequestCode);

            ExceptionMappingService.RegisterMapping<UploadStatusNotAvailableForMultipartException>(Response.UploadStatusNotAvailableForMultipart,
                (e, c) => GetExtraInformation(c, e.AssetId),
                HttpStatusCode.Conflict, Response.UploadStatusNotAvailableForMultipart,
                Response.UploadStatusUnavailableCode);

            ExceptionMappingService.RegisterMapping<UploadStatusNotAvailableForSinglepartException>(Response.UploadStatusNotAvailableForSinglepart,
                (e, c) => GetExtraInformation(c, e.AssetId),
                HttpStatusCode.Conflict, Response.UploadStatusNotAvailableForSinglepart,
                Response.UploadStatusUnavailableCode);

            ExceptionMappingService.RegisterMapping<AsperaUploadStatusUnavailableException>(Response.UploadStatusUnavailableFromAspera,
                (e, c) => GetExtraInformation(c, e.AssetId),
                HttpStatusCode.Conflict, Response.UploadStatusUnavailableFromAspera,
                Response.UploadStatusUnavailableCode, LogLevel.Error);

            ExceptionMappingService.RegisterMapping<InvalidSuggestMetadataQueryException>(Response.InvalidSuggestMetadataQuery,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest, Response.InvalidSuggestMetadataQuery,
                Response.InvalidQueryCode);

            ExceptionMappingService.RegisterMapping<InvalidSuggestContentQueryException>(Response.InvalidSuggestContentQuery,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest, Response.InvalidSuggestContentQuery,
                Response.InvalidQueryCode);

            ExceptionMappingService.RegisterMapping<InvalidLimitOrOffsetException>(Response.InvalidLimitOrOffset,
                (e, c) => GetExtraInformationForInvalidLimitOrOffsetWhenQueryingFolder(c, e),
                HttpStatusCode.BadRequest, Response.InvalidLimitOrOffset,
                Response.InvalidLimitOrOffsetCode);

            ExceptionMappingService.RegisterMapping<InvalidMaxResultCountException>(Response.InvalidMaxResultCount,
                (e, c) => GetExtraInformationForInvalidMaxResultCount(c, e),
                HttpStatusCode.BadRequest, Response.InvalidMaxResultCount,
                Response.InvalidLimitOrOffsetCode);

            ExceptionMappingService.RegisterMapping<InvalidQueryAppException>(Response.InvalidQueryApp,
               (e, c) => GetExtraInformationForInvalidQueryApp(c, e),
               HttpStatusCode.BadRequest, Response.InvalidQueryApp,
               Response.InvalidQueryAppCode);

            ExceptionMappingService.RegisterMapping<InvalidQueryUserStatusesException>(Response.InvalidQueryUserStatus,
               (e, c) => GetExtraInformationForInvalidQueryUserStatus(c, e),
               HttpStatusCode.BadRequest, Response.InvalidQueryUserStatus,
               Response.InvalidQueryUserStatusCode);

            ExceptionMappingService.RegisterMapping<InvalidLimitOrOffsetException>(
                Response.InvalidLimitOrOffsetForListCatalogs,
                (e, c) => GetExtraInformationForInvalidLimitOrOffsetWhenQueryingFolder(c, e),
                HttpStatusCode.BadRequest,
                Response.InvalidLimitOrOffsetForListCatalogs,
                Response.InvalidLimitOrOffsetCode,
                controllerName: "CatalogsController");

            ExceptionMappingService.RegisterMapping<InvalidLimitOrOffsetException>(Response.InvalidLimitOrOffsetForListWorkspaces,
                (e, c) => GetExtraInformationForInvalidLimitOrOffsetWhenQueryingFolder(c, e),
                HttpStatusCode.BadRequest, Response.InvalidLimitOrOffsetForListWorkspaces,
                Response.InvalidLimitOrOffsetCode, controllerName: "WorkspacesController");

            ExceptionMappingService.RegisterMapping<InvalidLimitOrOffsetException>(Response.InvalidLimitOrOffsetForWorkspaceEvents,
                (e, c) => GetExtraInformationForInvalidLimitOrOffsetWhenQueryingFolder(c, e),
                HttpStatusCode.BadRequest, Response.InvalidLimitOrOffsetForWorkspaceEvents,
                Response.InvalidLimitOrOffsetCode, controllerName: "WorkspaceEventsController");

            ExceptionMappingService.RegisterMapping<InvalidLimitOrOffsetException>(Response.InvalidLimitOrOffsetForWorkspaceEvents,
                (e, c) => GetExtraInformationForInvalidLimitOrOffsetWhenQueryingFolder(c, e),
                HttpStatusCode.BadRequest, Response.InvalidLimitOrOffsetForWorkspaceEvents,
                Response.InvalidLimitOrOffsetCode, controllerName: "NetworkEventsController");



            ExceptionMappingService.RegisterMapping<ViewElementsForbiddenException>(
                Response.InsufficientPermissionsForViewElement,
                (e, c) => GetExtraInformation(c, e.AssetId),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForViewElement,
                Response.InsufficientPermissionsCode,
                controllerName: "BulkElementDetailsController");

            ExceptionMappingService.RegisterMapping<InvalidLimitOrOffsetException>(Response.InvalidLimitOrOffsetForElements,
                (e, c) => GetExtraInformationForInvalidLimitOrOffsetWhenQueryingFolder(c, e),
                HttpStatusCode.BadRequest, Response.InvalidLimitOrOffsetForElements,
                Response.InvalidLimitOrOffsetCode, controllerName: "AssetElementController");

            ExceptionMappingService.RegisterMapping<InvalidLimitOrOffsetException>(Response.InvalidLimitOrOffsetForListMediaBoxes,
                (e, c) => GetExtraInformationForInvalidLimitOrOffsetWhenQueryingFolder(c, e),
                HttpStatusCode.BadRequest, Response.InvalidLimitOrOffsetForListMediaBoxes,
                Response.InvalidLimitOrOffsetCode, controllerName: "MediaboxesController");

            ExceptionMappingService.RegisterMapping<InvalidLimitOrOffsetException>(Response.InvalidLimitOrOffsetForListMediaBoxes,
                (e, c) => GetExtraInformationForInvalidLimitOrOffsetWhenQueryingFolder(c, e),
                HttpStatusCode.BadRequest, Response.InvalidLimitOrOffsetForListMediaBoxes,
                Response.InvalidLimitOrOffsetCode, controllerName: "ReceivedMediaboxesController");

            ExceptionMappingService.RegisterMapping<InvalidLimitOrOffsetException>(Response.InvalidLimitOrOffsetForListMediaBoxes,
                (e, c) => GetExtraInformationForInvalidLimitOrOffsetWhenQueryingFolder(c, e),
                HttpStatusCode.BadRequest, Response.InvalidLimitOrOffsetForListMediaBoxes,
                Response.InvalidLimitOrOffsetCode, controllerName: "WorkspaceMediaboxesController");

            ExceptionMappingService.RegisterMapping<InvalidQueryKindFilterException>(Response.InvalidQueryKindFilter,
                (e, c) => GetExtraInformationForInvalidQueryKindFilter(c, e),
                HttpStatusCode.BadRequest, Response.InvalidQueryKindFilter,
                Response.InvalidQueryKindFilterCode);

            ExceptionMappingService.RegisterMapping<InvalidQuerySpaceIdFilterException>(Response.InvalidQuerySpaceIdFilter,
                (e, c) => GetExtraInformationForInvalidQuerySpaceIdFilter(c, e),
                HttpStatusCode.BadRequest, Response.InvalidQuerySpaceIdFilter,
                Response.InvalidQuerySpaceIdFilterCode);

            ExceptionMappingService.RegisterMapping<InvalidQueryTypeFilterException>(Response.InvalidQueryTypeFilter,
                (e, c) => GetExtraInformationForInvalidQueryTypeFilter(c, e),
                HttpStatusCode.BadRequest, Response.InvalidQueryTypeFilter,
                Response.InvalidQueryTypeFilterCode);

            ExceptionMappingService.RegisterMapping<InvalidQueryFilterException>(Response.InvalidQueryFilter,
                (e, c) => GetExtraInformationForInvalidQueryFilter(c, e),
                HttpStatusCode.BadRequest, Response.InvalidQueryFilter,
                Response.InvalidQueryFilterCode);

            ExceptionMappingService.RegisterMapping<InvalidQueryFilterException>(
                Response.InvalidQueryValue,
                (e, c) => GetExtraInformationForInvalidQueryFilter(c, e),
                HttpStatusCode.BadRequest,
                Response.InvalidQueryValue,
                Response.InvalidQueryCode,
                controllerName: "CatalogAclSuggestController");

            ExceptionMappingService.RegisterMapping<InvalidQueryOrderFieldException>(Response.InvalidQueryOrderField,
                (e, c) => GetExtraInformationForInvalidQueryOrderField(c, e),
                HttpStatusCode.BadRequest, Response.InvalidQueryOrderField,
                Response.InvalidQueryOrderFieldCode);

            ExceptionMappingService.RegisterMapping<InvalidQueryOrderFieldException>(
                Response.InvalidQueryOrderFieldForListCatalogs,
                (e, c) => GetExtraInformationForInvalidQueryOrderField(c, e),
                HttpStatusCode.BadRequest,
                Response.InvalidQueryOrderFieldForListCatalogs,
                Response.InvalidQueryOrderFieldCode,
                controllerName: "CatalogsController");

            ExceptionMappingService.RegisterMapping<InvalidQueryOrderFieldException>(Response.InvalidQueryOrderFieldForListWorkspaces,
                (e, c) => GetExtraInformationForInvalidQueryOrderField(c, e),
                HttpStatusCode.BadRequest, Response.InvalidQueryOrderFieldForListWorkspaces,
                Response.InvalidQueryOrderFieldCode, controllerName: "WorkspacesController");

            ExceptionMappingService.RegisterMapping<InvalidQueryOrderFieldException>(Response.InvalidQueryOrderFieldForListElements,
                (e, c) => GetExtraInformationForInvalidQueryOrderField(c, e),
                HttpStatusCode.BadRequest, Response.InvalidQueryOrderFieldForListElements,
                Response.InvalidQueryOrderFieldCode, controllerName: "AssetElementController");

            ExceptionMappingService.RegisterMapping<InvalidQueryOrderFieldException>(Response.InvalidQueryOrderFieldForSearch,
                (e, c) => GetExtraInformationForInvalidQueryOrderField(c, e),
                HttpStatusCode.BadRequest, Response.InvalidQueryOrderFieldForSearch,
                Response.InvalidQueryOrderFieldCode, controllerName: "SearchWorkspaceController");

            ExceptionMappingService.RegisterMapping<InvalidQueryOrderFieldException>(Response.InvalidQueryOrderFieldForSearch,
                (e, c) => GetExtraInformationForInvalidQueryOrderField(c, e),
                HttpStatusCode.BadRequest, Response.InvalidQueryOrderFieldForSearch,
                Response.InvalidQueryOrderFieldCode, controllerName: "SearchUserContentsController");

            ExceptionMappingService.RegisterMapping<InvalidQueryOrderFieldException>(Response.InvalidQueryOrderFieldForSearch,
                (e, c) => GetExtraInformationForInvalidQueryOrderField(c, e),
                HttpStatusCode.BadRequest, Response.InvalidQueryOrderFieldForSearch,
                Response.InvalidQueryOrderFieldCode, controllerName: "FacetedSearchUserContentsController");

            ExceptionMappingService.RegisterMapping<InvalidQueryOrderFieldException>(Response.InvalidQueryOrderFieldForListMediaBoxes,
                (e, c) => GetExtraInformationForInvalidQueryOrderField(c, e),
                HttpStatusCode.BadRequest, Response.InvalidQueryOrderFieldForListMediaBoxes,
                Response.InvalidQueryOrderFieldCode, controllerName: "MediaboxesController");

            ExceptionMappingService.RegisterMapping<InvalidQueryOrderFieldException>(Response.InvalidQueryOrderFieldForListMediaBoxes,
                (e, c) => GetExtraInformationForInvalidQueryOrderField(c, e),
                HttpStatusCode.BadRequest, Response.InvalidQueryOrderFieldForListMediaBoxes,
                Response.InvalidQueryOrderFieldCode, controllerName: "ReceivedMediaboxesController");

            ExceptionMappingService.RegisterMapping<InvalidQueryOrderFieldException>(Response.InvalidQueryOrderFieldForListMediaBoxes,
                (e, c) => GetExtraInformationForInvalidQueryOrderField(c, e),
                HttpStatusCode.BadRequest, Response.InvalidQueryOrderFieldForListMediaBoxes,
                Response.InvalidQueryOrderFieldCode, controllerName: "WorkspaceMediaboxesController");

            ExceptionMappingService.RegisterMapping<InvalidQueryOrderFieldException>(
                Response.InvalidQueryOrderFieldForListWorkspaces,
                (e, c) => GetExtraInformationForInvalidQueryOrderField(c, e),
                HttpStatusCode.BadRequest,
                Response.InvalidQueryOrderFieldForListMediaboxContents,
                Response.InvalidQueryOrderFieldCode,
                controllerName: "MediaboxContentsController");

            ExceptionMappingService.RegisterMapping<InvalidQueryOrderFieldException>(
                Response.InvalidQueryOrderFieldForListWorkspaces,
                (e, c) => GetExtraInformationForInvalidQueryOrderField(c, e),
                HttpStatusCode.BadRequest,
                Response.InvalidQueryOrderFieldForListMediaboxContents,
                Response.InvalidQueryOrderFieldCode,
                controllerName: "MediaboxFolderContentsController");

            ExceptionMappingService.RegisterMapping<InvalidQueryOrderDirectionException>(Response.InvalidQueryOrderDirection,
                                                  (e, c) => GetExtraInformationForInvalidQueryOrderDirection(c, e),
                                                  HttpStatusCode.BadRequest, Response.InvalidQueryOrderDirection,
                                                  Response.InvalidQueryOrderDirectionCode);

            ExceptionMappingService.RegisterMapping<InvalidOperationOnRootFolderException>(Response.InvalidOperationOnRootFolder_DeleteTrashOrUntrash,
                                                  (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                                                  HttpStatusCode.Conflict, Response.InvalidOperationOnRootFolder_DeleteTrashOrUntrash,
                                                  Response.InvalidOperationOnRootFolderCode);

            ExceptionMappingService.RegisterMapping<InvalidOperationOnTrashedFolderException>(Response.InvalidOperationOnTrashedFolder,
                                                  (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                                                  HttpStatusCode.Conflict, Response.InvalidOperationOnTrashedFolder,
                                                  Response.FolderTrashedCode);

            ExceptionMappingService.RegisterMapping<InvalidOperationOnTrashedFolderException>(Response.InvalidOperationOnTrashedFolder,
                                                  (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                                                  HttpStatusCode.Conflict, Response.InvalidOperationOnTrashedFolder,
                                                  Response.FolderTrashedCode, controllerName: "AsperaFolderDownloadController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnTrashedFolderException>(Response.InvalidOperationOnTrashedFolder,
                (e, c) => GetExtraInformationForFolder(c, e.FolderId), HttpStatusCode.Conflict,
                Response.InvalidOperationOnTrashedFolder,
                Response.FolderTrashedCode, controllerName: "BulkArchiveFolderController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnCatalogFolderException>(Response.InvalidOperationOnCatalogFolder,
                                                  (e, c) => GetExtraInformationForFolder(c, e.FolderId), HttpStatusCode.BadRequest,
                                                  Response.InvalidOperationOnCatalogFolder, Response.InvalidOperationOnCatalogFolderCode);

            ExceptionMappingService.RegisterMapping<FolderAlreadyUntrashedException>(Response.InvalidOperationOnFolder_AlreadyNotTrashed,
                                                  (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                                                  HttpStatusCode.Conflict, Response.InvalidOperationOnFolder_AlreadyNotTrashed,
                                                  Response.FolderNotTrashedCode);

            ExceptionMappingService.RegisterMapping<InvalidOperationOnDeletedFolderException>(Response.InvalidOperationOnDeletedFolder,
                                                  (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                                                  HttpStatusCode.NotFound, Response.InvalidOperationOnDeletedFolder,
                                                  Response.FolderDeletedCode);

            ExceptionMappingService.RegisterMapping<InvalidOperationOnDeletedFolderException>(Response.InvalidOperationOnDeletedFolder,
                                                  (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                                                  HttpStatusCode.Conflict, Response.InvalidOperationOnDeletedFolder,
                                                  Response.FolderDeletedCode, controllerName: "AssetsController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnDeletedFolderException>(Response.InvalidOperationOnDeletedFolder,
                                                  (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                                                  HttpStatusCode.Conflict, Response.InvalidOperationOnDeletedFolder,
                                                  Response.FolderDeletedCode, controllerName: "FoldersController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnDeletedFolderException>(Response.InvalidOperationOnDeletedFolder,
                                                  (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                                                  HttpStatusCode.Conflict, Response.InvalidOperationOnDeletedFolder,
                                                  Response.FolderDeletedCode, controllerName: "AsperaUploadController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnDeletedFolderException>(Response.InvalidOperationOnDeletedFolder,
                                                  (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                                                  HttpStatusCode.NotFound, Response.InvalidOperationOnDeletedFolder,
                                                  Response.FolderDeletedCode, controllerName: "AsperaFolderDownloadController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnDeletedFolderException>(Response.InvalidOperationOnDeletedFolder,
                (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                HttpStatusCode.Conflict, Response.InvalidOperationOnDeletedFolder,
                Response.FolderDeletedCode, controllerName: "FileRequestsController");

            ExceptionMappingService.RegisterMapping<MultipleFileConditionsPerRequestNotAllowedException>(Response.MultipleFileConditionsPerRequestNotAllowed,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest, Response.MultipleFileConditionsPerRequestNotAllowed,
                Response.MultipleFileConditionsPerRequestNotAllowedCode, controllerName: "FileRequestsController");

            ExceptionMappingService.RegisterMapping<RestrictedFileExtensionFoundException>(Response.RestrictedFileExtensionFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest, Response.RestrictedFileExtensionFound,
                Response.RestrictedFileExtensionFoundCode, controllerName: "FileRequestsController");

            ExceptionMappingService.RegisterMapping<ExceededAllowedFileExtensionsMaxException>(Response.ExceededAllowedExtensionsMaxCount,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest, Response.ExceededAllowedExtensionsMaxCount,
                Response.ExceededAllowedExtensionsMaxCountCode, controllerName: "FileRequestsController");

            ExceptionMappingService.RegisterMapping<ExceededAllowedFileExtensionLengthException>(Response.ExceededAllowedExtensionMaxLength,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest, Response.ExceededAllowedExtensionMaxLength,
                Response.ExceededAllowedExtensionMaxLengthCode, controllerName: "FileRequestsController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnDeletedFolderException>(Response.InvalidOperationOnDeletedFolder,
                (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                HttpStatusCode.Conflict, Response.InvalidOperationOnDeletedFolder,
                Response.FolderDeletedCode, controllerName: "BulkCreateAssetController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnDeletedFolderException>(Response.InvalidOperationOnDeletedFolder,
                                                  (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                                                  HttpStatusCode.Conflict, Response.InvalidOperationOnDeletedFolder,
                                                  Response.FolderDeletedCode, controllerName: "AssetMultipartUploadController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnDeletedFolderException>(Response.InvalidOperationOnDeletedFolder,
                                                  (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                                                  HttpStatusCode.Conflict, Response.InvalidOperationOnDeletedFolder,
                                                  Response.FolderDeletedCode, controllerName: "BulkMoveAssetController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnDeletedFolderException>(Response.InvalidOperationOnDeletedFolder,
                                      (e, c) => GetExtraInformationForFolder(c, e.FolderId),
                                      HttpStatusCode.Conflict, Response.InvalidOperationOnDeletedFolder,
                                      Response.FolderDeletedCode, controllerName: "MoveFoldersController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnDeletedFolderException>(
                Response.InvalidOperationOnDeletedFolder,
                (e, c) => GetExtraInformation(c, e.FolderId),
                HttpStatusCode.BadRequest, Response.InvalidOperationOnDeletedFolder,
                Response.FolderDeletedCode, controllerName: "MediaboxController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnDeletedFolderException>(
                Response.InvalidOperationOnDeletedFolder,
                (e, c) => GetExtraInformation(c, e.FolderId),
                HttpStatusCode.BadRequest, Response.InvalidOperationOnDeletedFolder,
                Response.FolderDeletedCode, controllerName: "MediaboxesController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnDeletedFolderException>(Response.InvalidOperationOnDeletedFolder,
                (e, c) => GetExtraInformationForFolder(c, e.FolderId), HttpStatusCode.Conflict,
                Response.InvalidOperationOnDeletedFolder,
                Response.FolderDeletedCode, controllerName: "BulkArchiveFolderController");

            ExceptionMappingService.RegisterMapping<ArchiveNotEntitledException>(Response.ArchiveNotEntitled,
                (e, c) => GetExtraInformationWithNoAssetId(c), HttpStatusCode.Conflict,
                Response.ArchiveNotEntitled,
                Response.ArchiveNotEntitledCode);

            ExceptionMappingService.RegisterMapping<UploadPartFailedException>(Response.PartUploadFailed,
                                                  (e, c) => GetExtraInformationForPartUpload(c, e),
                                                  HttpStatusCode.InternalServerError, Response.PartUploadFailed,
                                                  Response.PartUploadFailedCode);

            ExceptionMappingService.RegisterMapping<SinglePartUploadFailedException>(Response.SinglePartUploadFailed,
                                                  (e, c) => GetExtraInformationForFileOperations(c, e.FileId, e.FileType),
                                                  HttpStatusCode.InternalServerError, Response.SinglePartUploadFailed,
                                                  Response.AssetSinglePartUploadFailedCode, controllerName: "AssetSinglePartUploadController");

            ExceptionMappingService.RegisterMapping<SinglePartUploadFailedException>(Response.SinglePartUploadFailed,
                                      (e, c) => GetExtraInformationForFileOperations(c, e.FileId, e.FileType),
                                      HttpStatusCode.InternalServerError, Response.SinglePartUploadFailed,
                                      Response.ElementSinglePartUploadFailedCode, controllerName: "ElementSinglePartUploadController");

            ExceptionMappingService.RegisterMapping<InvalidFileContentForSinglePartUploadException>(Response.InvalidSinglePartUpload_MissingOrInvalidContent,
                                                  (e, c) => GetExtraInformationForInvalidFileSize(c, e.Size),
                                                  HttpStatusCode.InternalServerError, Response.InvalidSinglePartUpload_MissingOrInvalidContent,
                                                  Response.MissingOrInvalidFileCode);

            ExceptionMappingService.RegisterMapping<FileTooLargeForSinglePartUploadException>(Response.InvalidSinglePartUpload_FileTooLarge,
                                                  (e, c) => GetExtraInformationForInvalidFileSize(c, e.Size),
                                                  HttpStatusCode.InternalServerError, Response.InvalidSinglePartUpload_FileTooLarge,
                                                  Response.AssetTooLargeCode, controllerName: "AssetSinglePartUploadController");

            ExceptionMappingService.RegisterMapping<FileTooLargeForSinglePartUploadException>(Response.InvalidSinglePartUpload_FileTooLarge,
                                      (e, c) => GetExtraInformationForInvalidFileSize(c, e.Size),
                                      HttpStatusCode.InternalServerError, Response.InvalidSinglePartUpload_FileTooLarge,
                                      Response.ElementTooLargeCode, controllerName: "ElementSinglePartUploadController");

            ExceptionMappingService.RegisterMapping<InvalidMetadataFieldNameException>(Response.MissingMetadataFieldName,
                                                  (e, c) => GetExtraInformationWithNoAssetId(c),
                                                  HttpStatusCode.BadRequest, Response.MissingMetadataFieldName,
                                                  Response.MissingMetadataFieldNameCode);

            ExceptionMappingService.RegisterMapping<InvalidMetadataFieldValueException>(Response.MissingMetadataFieldValue,
                                                  (e, c) => GetExtraInformationWithNoAssetId(c),
                                                  HttpStatusCode.BadRequest, Response.MissingMetadataFieldValue,
                                                  Response.MissingMetadataFieldValueCode);

            ExceptionMappingService.RegisterMapping<TooManyRequestedAssetsException>(Response.TooManyRequestedAssets,
                                      (e, c) => new { MaximumRequestedAssetsCount = e.Limit, AmountOfAssetsRequested = e.Requested },
                                      HttpStatusCode.BadRequest, Response.TooManyRequestedAssets,
                                      Response.TooManyRequestedAssetsCode);

            ExceptionMappingService.RegisterMapping<UsernameNotAvailableException>(Response.UsernameNotAvailable,
                                                  (e, c) => GetExtraInformation(c, e),
                                                  HttpStatusCode.Conflict, Response.UsernameNotAvailable,
                                                  Response.UsernameNotAvailableCode);

            ExceptionMappingService.RegisterMapping<RegistrationException>(GetRegistrationMessage,
                                                   (e, c) => GetExtraInformation(c, e),
                                                   HttpStatusCode.BadRequest,
                                                   GetRegistrationMessage,
                                                   Response.InvalidRegistrationCode);

            ExceptionMappingService.RegisterMapping<PlaylistNotFoundException>(Response.PlaylistNotFound,
                          (e, c) => new { AssetId = e.AssetId },
                          HttpStatusCode.NotFound, Response.PlaylistNotFound,
                          Response.PlaylistNotFoundCode);

            ExceptionMappingService.RegisterMapping<InvalidNameException>(Response.MissingOrInvalidName,
                                                  (e, c) => GetExtraInformationWithName(c, e.Name),
                                                  HttpStatusCode.BadRequest,
                                                  Response.MissingOrInvalidName,
                                                  Response.MissingOrInvalidNameCode);

            ExceptionMappingService.RegisterMapping<InvalidExpirationException>(
                Response.InvalidExpiration,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidExpiration,
                Response.InvalidExpirationCode);

            ExceptionMappingService.RegisterMapping<InvalidMediaboxTypeException>(
                Response.InvalidMediaboxType,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidMediaboxType,
                Response.InvalidMediaboxTypeCode);

            ExceptionMappingService.RegisterMapping<InvalidMediaboxStatusException>(
                Response.InvalidMediaboxStatus,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidMediaboxStatus,
                Response.InvalidMediaboxStatusCode);

            ExceptionMappingService.RegisterMapping<InvalidMediaboxFilterOptionsException>(
                Response.InvalidMediaboxFilterOptions,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidMediaboxFilterOptions,
                Response.InvalidMediaboxFilterOptionsCode);

            ExceptionMappingService.RegisterMapping<PasswordException>(
                Response.InvalidPassword,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidPassword,
                Response.InvalidPasswordCode);

            ExceptionMappingService.RegisterMapping<RecipientsAreRequiredException>(
                Response.InvalidRecipients_Required,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidRecipients_Required,
                Response.InvalidRecipientsCode);

            ExceptionMappingService.RegisterMapping<InvalidRecipientsException>(
                Response.InvalidRecipients,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidRecipients,
                Response.InvalidRecipientsCode);

            ExceptionMappingService.RegisterMapping<RecipientNotMemberOfMediaboxException>(
                Response.InvalidRecipients_NotPartOfMediaBox,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidRecipients_NotPartOfMediaBox,
                Response.InvalidRecipientsCode);

            ExceptionMappingService.RegisterMapping<InvalidDeliveryReceiptsException>(
                Response.InvalidDeliveryReceipts,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidDeliveryReceipts,
                Response.InvalidDeliveryReceiptsCode);

            ExceptionMappingService.RegisterMapping<InvalidOperationOnMultipleContainersException>(
                Response.InvalidOperationOnMultipleContainers,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidOperationOnMultipleContainers,
                Response.InvalidAssetsCode);

            ExceptionMappingService.RegisterMapping<InvalidOperationOnMultipleCatalogsException>(
                Response.InvalidOperationOnMultipleCatalogs,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidOperationOnMultipleCatalogs,
                Response.InvalidAssetsCode);

            ExceptionMappingService.RegisterMapping<InvalidOperationOnMultipleExternalBucketsException>(
                Response.InvalidOperationOnMultipleExternalBuckets,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidOperationOnMultipleExternalBuckets,
                Response.InvalidAssetsCode
                );

            ExceptionMappingService.RegisterMapping<InvalidOperationOnMultipleWorkspacesException>(
                Response.InvalidOperationOnMultipleWorkspaces,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidOperationOnMultipleWorkspaces,
                Response.InvalidAssetsCode);

            ExceptionMappingService.RegisterMapping<InvalidOperationOnMultipleWorkspacesException>(
                Response.InvalidOperationOnMultipleWorkspacesWithContent,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidOperationOnMultipleWorkspacesWithContent,
                Response.InvalidContentCode,
                controllerName: "MediaboxesController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnMultipleWorkspacesException>(
                Response.InvalidOperationOnMultipleWorkspacesWithContent,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidOperationOnMultipleWorkspacesWithContent,
                Response.InvalidContentCode,
                controllerName: "MediaboxController");

            ExceptionMappingService.RegisterMapping<AssetAccessDeniedException>(
                "Access denied.",
                (e, c) => GetExtraInformation(c, e.AssetId),
                HttpStatusCode.BadRequest,
                Response.AssetNotFound,
                Response.AssetNotFoundCode,
                controllerName: "MediaboxesController");

            ExceptionMappingService.RegisterMapping<AssetNotFoundException>(
                Response.AssetNotFound,
                (e, c) => GetExtraInformation(c, e.AssetId),
                HttpStatusCode.BadRequest,
                Response.AssetNotFound,
                Response.AssetNotFoundCode,
                controllerName: "MediaboxesController");

            ExceptionMappingService.RegisterMapping<AssetNotFoundInMediaboxException>(
                Response.AssetNotFound,
                (e, c) => GetExtraInformation(c, e.AssetId),
                HttpStatusCode.BadRequest,
                Response.AssetNotFound,
                Response.AssetNotFoundCode,
                controllerName: "MediaboxDownloadController");

            ExceptionMappingService.RegisterMapping<FolderAccessDeniedException>(
                "Access denied.",
                (e, c) => GetExtraInformation(c, e.FolderId),
                HttpStatusCode.BadRequest,
                Response.FolderNotFound,
                Response.FolderNotFoundCode,
                controllerName: "MediaboxesController");

            ExceptionMappingService.RegisterMapping<FolderNotFoundException>(
                Response.FolderNotFound,
                (e, c) => GetExtraInformation(c, e.FolderId),
                HttpStatusCode.BadRequest,
                Response.FolderNotFound,
                Response.FolderNotFoundCode,
                controllerName: "MediaboxesController");

            ExceptionMappingService.RegisterMapping<FolderNotFoundException>(
                Response.FolderNotFound,
                (e, c) => GetExtraInformation(c, e.FolderId),
                HttpStatusCode.NotFound,
                Response.FolderNotFound,
                Response.FolderNotFoundCode,
                controllerName: "MediaboxFolderContentsController");

            ExceptionMappingService.RegisterMapping<FolderNotFoundException>(
                Response.FolderNotFound,
                (e, c) => GetExtraInformation(c, e.FolderId),
                HttpStatusCode.NotFound,
                Response.FolderNotFound,
                Response.FolderNotFoundCode,
                controllerName: "MediaboxContentsController");

            ExceptionMappingService.RegisterMapping<AssetNotFoundException>(
                Response.AssetNotFound,
                (e, c) => GetExtraInformation(c, e.AssetId),
                HttpStatusCode.BadRequest,
                Response.AssetNotFound,
                Response.AssetNotFoundCode,
                controllerName: "MediaboxController");

            ExceptionMappingService.RegisterMapping<AssetAccessDeniedException>(
                "Access denied.",
                (e, c) => GetExtraInformation(c, e.AssetId),
                HttpStatusCode.BadRequest,
                Response.AssetNotFound,
                Response.AssetNotFoundCode,
                controllerName: "MediaboxController");

            ExceptionMappingService.RegisterMapping<FolderAccessDeniedException>(
                "Access denied.",
                (e, c) => GetExtraInformation(c, e.FolderId),
                HttpStatusCode.BadRequest,
                Response.FolderNotFound,
                Response.FolderNotFoundCode,
                controllerName: "MediaboxController");

            ExceptionMappingService.RegisterMapping<FolderNotFoundException>(
                Response.FolderNotFound,
                (e, c) => GetExtraInformation(c, e.FolderId),
                HttpStatusCode.BadRequest,
                Response.FolderNotFound,
                Response.FolderNotFoundCode,
                controllerName: "MediaboxController");

            ExceptionMappingService.RegisterMapping<FolderNotFoundException>(
                Response.FolderNotFound,
                (e, c) => GetExtraInformation(c, e.FolderId),
                HttpStatusCode.NotFound,
                Response.FolderNotFound,
                Response.FolderNotFoundCode,
                controllerName: "ParentFoldersController");

            ExceptionMappingService.RegisterMapping<FolderAccessDeniedException>(
                Response.FolderNotFound,
                (e, c) => GetExtraInformation(c, e.FolderId),
                HttpStatusCode.NotFound,
                Response.FolderNotFound,
                Response.FolderNotFoundCode,
                controllerName: "ParentFoldersController");

            ExceptionMappingService.RegisterMapping<FolderAccessDeniedException>(
                Response.FolderNotFound,
                (e, c) => GetExtraInformation(c, e.FolderId),
                HttpStatusCode.NotFound,
                Response.FolderNotFound,
                Response.FolderNotFoundCode,
                controllerName: "FolderStatsController");

            ExceptionMappingService.RegisterMapping<AssetNotFoundException>(
                Response.AssetNotFound,
                (e, c) => GetExtraInformation(c, e.AssetId),
                HttpStatusCode.BadRequest,
                Response.AssetNotFound,
                Response.AssetNotFoundCode,
                controllerName: "BulkCopyAssetController");

            ExceptionMappingService.RegisterMapping<AssetAccessDeniedException>(
                "Access denied.",
                (e, c) => GetExtraInformation(c, e.AssetId),
                HttpStatusCode.BadRequest,
                Response.AssetNotFound,
                Response.AssetNotFoundCode,
                controllerName: "BulkCopyAssetController");

            ExceptionMappingService.RegisterMapping<InvalidCustomKeyException>(Response.InvalidCustomKey,
                            (e, c) => GetExtraInformation(c, e),
                            HttpStatusCode.BadRequest,
                            Response.InvalidCustomKey,
                            Response.InvalidCustomKeyCode);

            ExceptionMappingService.RegisterMapping<ClientNotAllowedToVerifyAuthenticElementsException>(
                Response.ClientNotAllowedToVerifyAuthenticElements,
                (e, c) => GetExtraInformation(c, e),
                HttpStatusCode.Forbidden,
                Response.ClientNotAllowedToVerifyAuthenticElements,
                Response.ClientNotAllowedToVerifyAuthenticElementsCode);

            ExceptionMappingService.RegisterMapping<NetworkNotAllowedToUploadElementsException>(
                Response.WorkspaceNotAllowedToUploadElements,
                (e, c) => GetExtraInformation(c, e),
                HttpStatusCode.Forbidden,
                Response.WorkspaceNotAllowedToUploadElements,
                Response.InvalidOperationOnWorkspaceCode);

            ExceptionMappingService.RegisterMapping<FrameAccurateReviewNotEntitledException>(
                Response.WorkspaceNotAllowedToPerformOperation,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Forbidden,
                Response.WorkspaceNotAllowedToPerformOperation,
                Response.InvalidOperationOnWorkspaceCode);


            ExceptionMappingService.RegisterMapping<InvalidBrandingElementException>((e, c) => e.Message,
                                      (e, c) => GetExtraInformationWithOnlyWorkspace(c, e.WorkspaceId),
                                      HttpStatusCode.BadRequest, (e, c) => e.Message,
                                      Response.InvalidBrandingElementCode);

            ExceptionMappingService.RegisterMapping<InvalidDescriptionException>(
                Response.InvalidDescription,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidDescription,
                Response.InvalidDescriptionCode);

            ExceptionMappingService.RegisterMapping<ProxiesAlreadyCreatedException>(
                Response.ProxiesAlreadyCreated,
                (e, c) => GetExtraInformation(c, e.AssetId),
                HttpStatusCode.Conflict,
                Response.ProxiesAlreadyCreated,
                Response.ProxiesAlreadyCreatedCode);

            ExceptionMappingService.RegisterMapping<WatermarkingOpacityException>(
                Response.InvalidWatermarkingOpacity,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidWatermarkingOpacity,
                Response.InvalidWatermarkingCode);

            ExceptionMappingService.RegisterMapping<WatermarkingPositionException>(
                Response.InvalidWatermarkingPosition,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidWatermarkingPosition,
                Response.InvalidWatermarkingCode);

            ExceptionMappingService.RegisterMapping<WatermarkingTextException>(
                Response.InvalidWatermarkingText,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidWatermarkingText,
                Response.InvalidWatermarkingCode);

            ExceptionMappingService.RegisterMapping<WatermarkingDeniedException>(
                Response.WatermarkingNotEnabled,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.WatermarkingNotEnabled,
                Response.EntitlementRequiredCode);

            ExceptionMappingService.RegisterMapping<MediaBoxTrackingDeniedException>(
                Response.MediaBoxTrackingNotEnabled,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.MediaBoxTrackingNotEnabled,
                Response.EntitlementRequiredCode);

            ExceptionMappingService.RegisterMapping<RestoreQuotaException>(
                Response.RestoreQuotaExceeded,
                (e, c) => GetExtraInformation(c, e.AssetId),
                HttpStatusCode.Conflict,
                Response.RestoreQuotaExceeded,
                Response.RestoreQuotaExceededCode);

            ExceptionMappingService.RegisterMapping<InvalidCopyAssetRequestException>(
               Response.InvalidCopyAssetRequest,
               (e, c) => GetExtraInformationWithNoAssetId(c),
               HttpStatusCode.BadRequest,
               Response.InvalidCopyAssetRequest,
               Response.InvalidCopyAssetRequestCode);

            ExceptionMappingService.RegisterMapping<InvalidUserException>(
              Response.InvalidUser,
              (e, c) => GetExtraInformationWithNoAssetId(c),
              HttpStatusCode.BadRequest,
              Response.InvalidUser,
              Response.InvalidUserCode);

            ExceptionMappingService.RegisterMapping<InvalidAssetTypeForAppException>(
              Response.InvalidAssetTypeForWorkSessionApp,
              (e, c) => GetExtraInformationWithNoAssetId(c),
              HttpStatusCode.BadRequest,
              Response.InvalidAssetTypeForWorkSessionApp,
              Response.InvalidAssetTypeCode);

            ExceptionMappingService.RegisterMapping<InvalidWorkSessionAppNameException>(
              Response.InvalidWorkSessionAppName,
              (e, c) => GetExtraInformationWithNoAssetId(c),
              HttpStatusCode.BadRequest,
              Response.InvalidWorkSessionAppName,
              Response.MissingOrInvalidNameCode);

            ExceptionMappingService.RegisterMapping<InvalidIngestConfigurationException>(
              Response.InvalidIngestConfig_BadConfig,
              (e, c) => GetExtraInformationForInvalidProxyType(c, e.ProxyType),
              HttpStatusCode.BadRequest,
              Response.InvalidIngestConfig_BadConfig,
              Response.InvalidIngestConfigurationCode);

            ExceptionMappingService.RegisterMapping<IngestConfigurationNotEntitledException>(
              Response.InvalidIngestConfig_NotEntitled,
              (e, c) => GetExtraInformationWithNoAssetId(c),
              HttpStatusCode.Conflict,
              Response.InvalidIngestConfig_NotEntitled,
              Response.EntitlementRequiredCode);

            ExceptionMappingService.RegisterMapping<InvalidMoveAssetRequestException>(
              Response.InvalidMoveAssetRequest,
              (e, c) => GetExtraInformationWithNoAssetId(c),
              HttpStatusCode.BadRequest,
              Response.InvalidMoveAssetRequest,
              Response.InvalidMoveAssetRequestCode);

            ExceptionMappingService.RegisterMapping<InvalidAsperaTransferConfigurationException>(
              Response.InvalidAsperaTransferConfiguration,
              (e, c) => GetExtraInformationWithNoAssetId(c),
              HttpStatusCode.BadRequest,
              Response.InvalidAsperaTransferConfiguration,
              Response.InvalidRequestCode);

            ExceptionMappingService.RegisterMapping<InvalidS3TransferConfigurationException>(
              Response.InvalidS3TransferConfiguration,
              (e, c) => GetExtraInformationWithNoAssetId(c),
              HttpStatusCode.BadRequest,
              Response.InvalidS3TransferConfiguration,
              Response.InvalidRequestCode);

            ExceptionMappingService.RegisterMapping<AwsKmsSendToS3TargetKeyIdNotFoundException>(
                Response.UnhandledException,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.InternalServerError, Response.UnhandledException,
                Response.UnhandledExceptionCode, LogLevel.Error);

            ExceptionMappingService.RegisterMapping<MissingS3CredentialsTransferRequestException>(
              Response.InvalidS3TransferConfiguration,
              (e, c) => GetExtraInformationWithNoAssetId(c),
              HttpStatusCode.BadRequest,
              Response.InvalidS3TransferConfiguration,
              Response.InvalidRequestCode);

            ExceptionMappingService.RegisterMapping<AsperaTransferSessionNotFoundException>(
              Response.AsperaTransferSessionNotFound,
              (e, c) => GetExtraInformationWithNoAssetId(c),
              HttpStatusCode.NotFound,
              Response.AsperaTransferSessionNotFound,
              Response.AsperaTransferSessionNotFoundCode);

            ExceptionMappingService.RegisterMapping<ExternalTransferSessionNotFoundException>(
              Response.ExternalTransferSessionNotFound,
              (e, c) => GetExtraInformationWithNoAssetId(c),
              HttpStatusCode.NotFound,
              Response.ExternalTransferSessionNotFound,
              Response.ExternalTransferSessionNotFoundCode);

            ExceptionMappingService.RegisterMapping<AsperaTransferSessionAccessDeniedException>(
             "Access denied.",
             (e, c) => GetExtraInformationWithNoAssetId(c),
             HttpStatusCode.NotFound,
             Response.AsperaTransferSessionNotFound,
             Response.AsperaTransferSessionNotFoundCode);

            ExceptionMappingService.RegisterMapping<ExternalTransferSessionAccessDeniedException>(
             "Access denied.",
             (e, c) => GetExtraInformationWithNoAssetId(c),
             HttpStatusCode.NotFound,
             Response.ExternalTransferSessionNotFound,
             Response.ExternalTransferSessionNotFoundCode);

            ExceptionMappingService.RegisterMapping<InvalidOperationOnMultipleNetworksException>(
                Response.InvalidOperationOnMultipleNetworks,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidOperationOnMultipleNetworks,
                Response.InvalidWorkspacesCode);

            ExceptionMappingService.RegisterMapping<InvalidAwsRegionException>(
                Response.InvalidAwsRegionForS3ExternalTransfer,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidAwsRegionForS3ExternalTransfer,
                Response.InvalidRequestCode);

            ExceptionMappingService.RegisterMapping<WebhookNotFoundException>(
                Response.WebhookNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.WebhookNotFound,
                Response.WebhookNotFoundCode);

            ExceptionMappingService.RegisterMapping<WebhookAccessDeniedException>(
                "Access denied to Webhook.",
                (e, c) => GetExtraInformationIncludingWebhookIdAndAccessCode(c, e),
                HttpStatusCode.NotFound,
                Response.WebhookNotFound,
                Response.WebhookNotFoundCode);

            ExceptionMappingService.RegisterMapping<InvalidWebhookEventsException>(
                Response.InvalidWebhookEvents,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidWebhookEvents,
                Response.InvalidWebhookEventsCode);

            ExceptionMappingService.RegisterMapping<InvalidWebhookUrlException>(
                Response.InvalidUrl,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidUrl,
                Response.InvalidUrlCode);

            ExceptionMappingService.RegisterMapping<NetworkAccessDeniedException>(
                "Access denied to Network.",
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.NetworkNotFound,
                Response.NetworkNotFoundCode);

            ExceptionMappingService.RegisterMapping<NetworkNotFoundException>(
                Response.NetworkNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.NetworkNotFound,
                Response.NetworkNotFoundCode);

            ExceptionMappingService.RegisterMapping<NetworkAccessDeniedException>(
                "Access denied to Network.",
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.NetworkNotFound,
                Response.NetworkNotFoundCode, controllerName: "FacetedSearchUserContentsController");

            ExceptionMappingService.RegisterMapping<NetworkNotFoundException>(
                Response.NetworkNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.NetworkNotFound,
                Response.NetworkNotFoundCode, controllerName: "FacetedSearchUserContentsController");

            ExceptionMappingService.RegisterMapping<NetworkAccessDeniedException>(
                "Access denied to Network.",
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.NetworkNotFound,
                Response.NetworkNotFoundCode, controllerName: "SuggestMetadataFieldsController");

            ExceptionMappingService.RegisterMapping<CiJobAlreadyExistsException>(
                Response.InvalidCiJobRequest_JobAlreadyExists,
                (e, c) => GetExtraInformationForInvalidProxyRequest(c, e.JobKey, e.AssetId),
                HttpStatusCode.Conflict, Response.InvalidCiJobRequest_JobAlreadyExists,
                Response.InvalidCiJobRequest_JobAlreadyExistsCode);

            ExceptionMappingService.RegisterMapping<InvalidFileFormatForCiJobException>(
                Response.InvalidCiJobRequest_InvalidFileFormatForJob,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest, Response.InvalidCiJobRequest_InvalidFileFormatForJob,
                Response.InvalidCiJobRequestCode);

            ExceptionMappingService.RegisterMapping<InvalidKeyForCiJobException>(
                Response.InvalidCiJobRequest_InvalidKeyForJob,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest, Response.InvalidCiJobRequest_InvalidKeyForJob,
                Response.InvalidCiJobRequestCode);

            ExceptionMappingService.RegisterMapping<InvalidFileFormatForIngestConfigurationException>(
                Response.InvalidIngestConfig_InvalidFileFormat,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest, Response.InvalidIngestConfig_InvalidFileFormat,
                Response.InvalidIngestConfigurationCode);

            ExceptionMappingService.RegisterMapping<InvalidCiJobConfigurationException>(
                Response.InvalidCiJobRequest_BadJobConfiguration,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest, Response.InvalidCiJobRequest_BadJobConfiguration,
                Response.InvalidCiJobRequestCode);

            ExceptionMappingService.RegisterMapping<NotEntitledToCiJobException>(
                Response.InvalidCiJobRequest_NotEntitled,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Conflict, Response.InvalidCiJobRequest_NotEntitled,
                Response.EntitlementRequiredCode);

            ExceptionMappingService.RegisterMapping<NotEntitledToProFileRequestException>(
                Response.InvalidEntitlement_ProFileRequest,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Conflict, Response.InvalidEntitlement_ProFileRequest,
                Response.EntitlementRequiredCode);

            ExceptionMappingService.RegisterMapping<NotEntitledToLiveStreamsException>(
                Response.InvalidEntitlement_LiveStreams,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Conflict,
                Response.InvalidEntitlement_LiveStreams,
                Response.EntitlementRequiredCode);

            ExceptionMappingService.RegisterMapping<AssetNotLiveStreamingException>(
                Response.AssetNotLiveStreaming,
                (e, c) => GetExtraInformation(c, e.AssetId),
                HttpStatusCode.Conflict,
                Response.AssetNotLiveStreaming,
                Response.AssetNotLiveStreamingCode);

            ExceptionMappingService.RegisterMapping<MultipleMetadataRequestsPerAssetNotAllowedException>(
                Response.InvalidCiJobRequest_MultipleMetadataRequestsPerAsset,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest, Response.InvalidCiJobRequest_MultipleMetadataRequestsPerAsset,
                Response.InvalidRequestCode);

            ExceptionMappingService.RegisterMapping<AssetDoesNotHaveCiJobsException>(
                Response.InvalidCiJobRequest_MultipleMetadataRequestsPerAsset,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest, Response.InvalidCiJobRequest_MultipleMetadataRequestsPerAsset,
                Response.InvalidRequestCode);

            ExceptionMappingService.RegisterMapping<AssetNotEnabledForFindRelatedException>(
                Response.InvalidAssetForFindRelated,
                (e, c) => GetExtraInformationForFindRelatedAssetsException(c, e),
                HttpStatusCode.BadRequest, Response.InvalidAssetForFindRelated,
                Response.InvalidAssetForFindRelatedCode);

            ExceptionMappingService.RegisterMapping<InvalidSourceAssetForCiJobException>(
                Response.InvalidCiJobRequest_InvalidSource,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest, Response.InvalidCiJobRequest_InvalidSource,
                Response.InvalidCiJobRequest_InvalidSourceCode);

            ExceptionMappingService.RegisterMapping<InvalidStitchRequestException>(
                Response.InvalidCiStitchJobRequest,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest, Response.InvalidCiStitchJobRequest,
                Response.InvalidRequestCode);

            ExceptionMappingService.RegisterMapping<InvalidObjectDetectionRequestException>(
                Response.InvalidCiObjectDetectionRequest,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest, Response.InvalidCiObjectDetectionRequest,
                Response.InvalidRequestCode);

            ExceptionMappingService.RegisterMapping<InvalidWatermarkRequestException>(
                Response.InvalidCiJobWatermarkRequest,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest, Response.InvalidCiJobWatermarkRequest,
                Response.InvalidRequestCode);

            ExceptionMappingService.RegisterMapping<InvalidHexColorException>(
                Response.InvalidColorForTextWatermarkRequest,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest, Response.InvalidColorForTextWatermarkRequest,
                Response.InvalidRequestCode,
                controllerName: "BulkCiJobsController");

            ExceptionMappingService.RegisterMapping<InvalidTargetTypeForCiJobException>(
                Response.InvalidCiStitchJobTargetType,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest, Response.InvalidCiStitchJobTargetType,
                Response.InvalidTargetTypeCode);

            ExceptionMappingService.RegisterMapping<InvalidTargetFormatForCiJobException>(
                Response.InvalidCiJobRequest_InvalidTargetFormatForJob,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest, Response.InvalidCiJobRequest_InvalidTargetFormatForJob,
                Response.InvalidTargetFormatCode);

            ExceptionMappingService.RegisterMapping<RenderAlreadyExistsForAssetException>(
                Response.RenderAlreadyExistsCode,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Conflict, Response.RenderAlreadyExists,
                Response.RenderAlreadyExistsCode);

            ExceptionMappingService.RegisterMapping<InvalidConvertImageRequestException>(
                Response.InvalidCiConvertImageJobRequest,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest, Response.InvalidCiConvertImageJobRequest,
                Response.InvalidRequestCode);

            ExceptionMappingService.RegisterMapping<InvalidCreateImageRequestException>(
                Response.InvalidCiCreateImageJobRequest,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidCiCreateImageJobRequest,
                Response.InvalidRequestCode);

            ExceptionMappingService.RegisterMapping<InvalidCreateImageRequestTargetKindException>(
                Response.InvalidCiCreateImageJobTargetKind,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidCiCreateImageJobTargetKind,
                Response.InvalidRequestCode);

            ExceptionMappingService.RegisterMapping<InvalidCreateImageRequestTargetMarkInException>(
                Response.InvalidCiCreateImageJobTargetMarkIn,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidCiCreateImageJobTargetMarkIn,
                Response.InvalidRequestCode);

            ExceptionMappingService.RegisterMapping<InvalidCreateImageRequestTargetTimecodeException>(
                Response.InvalidCiCreateImageJobTargetTimecode,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidCiCreateImageJobTargetTimecode,
                Response.InvalidRequestCode);

            ExceptionMappingService.RegisterMapping<InvalidCreateImageRequestTargetNameException>(
                Response.InvalidCiCreateImageJobTargetName,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidCiCreateImageJobTargetName,
                Response.InvalidRequestCode);

            ExceptionMappingService.RegisterMapping<InvalidEdlPullRequestException>(
                Response.InvalidEdlPullJobRequest,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidEdlPullJobRequest,
                Response.InvalidRequestCode);

            ExceptionMappingService.RegisterMapping<InvalidSpeechToTextRequestException>(
                Response.InvalidCiSpeechToTextJobRequest,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest, Response.InvalidCiSpeechToTextJobRequest,
                Response.InvalidRequestCode);

            ExceptionMappingService.RegisterMapping<InvalidTranscodeVideoRequestException>(
                Response.InvalidCiTranscodeJobRequest,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest, Response.InvalidCiTranscodeJobRequest,
                Response.InvalidRequestCode);

            ExceptionMappingService.RegisterMapping<CannotChangeFolderWorkspaceException>(
                Response.InvalidFolderMove_CannotChangeWorkspace,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest, Response.InvalidFolderMove_CannotChangeWorkspace,
                Response.CannotChangeWorkspaceCode);

            ExceptionMappingService.RegisterMapping<CannotMoveFolderToChildException>(
                Response.InvalidFolderMove_CannotMoveParentToChild,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest, Response.InvalidFolderMove_CannotMoveParentToChild,
                Response.InvalidFolderCode);

            ExceptionMappingService.RegisterMapping<CannotMoveFolderToSelfException>(
                Response.InvalidFolderMove_CannotMoveFolderToSelf,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest, Response.InvalidFolderMove_CannotMoveFolderToSelf,
                Response.InvalidFolderCode);

            ExceptionMappingService.RegisterMapping<UserMetadataAlreadyExistsException>(
                Response.UserMetadataAlreadyExists,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Conflict, Response.UserMetadataAlreadyExists,
                Response.UserMetadataAlreadyExistsCode);

            ExceptionMappingService.RegisterMapping<UserMetadataNotFoundException>(
                Response.UserMetadataNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound, Response.UserMetadataNotFound,
                Response.UserMetadataNotFoundCode);

            ExceptionMappingService.RegisterMapping<ImportConfigurationNotFoundException>(
                Response.ImportConfigurationNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound, Response.ImportConfigurationNotFound,
                Response.ImportConfigurationNotFoundCode);

            ExceptionMappingService.RegisterMapping<NetworkAccessDeniedException>(
                "Access denied to Network.",
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.ImportConfigurationNotFound,
                Response.ImportConfigurationNotFoundCode,
                controllerName: "ImportOperationsController");

            ExceptionMappingService.RegisterMapping<AssetNotFoundForBulkOperationException>(Response.AssetNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c), HttpStatusCode.BadRequest,
                Response.AssetNotFound,
                Response.AssetNotFoundCode,
                controllerName: "AsperaUploadController");

            ExceptionMappingService.RegisterMapping<NoAssetsFoundException>(Response.NoAssetsFound,
                (e, c) => GetExtraInformationForFolder(c, e.FolderId), HttpStatusCode.Conflict,
                Response.NoAssetsFound,
                Response.NoAssetsFoundCode,
                controllerName: "AsperaFolderDownloadController");

            ExceptionMappingService.RegisterMapping<NoAsperaTransferableFilesException>(Response.InvalidAsperaTransfer_NoTransferableFiles,
                (e, c) => GetExtraInformation(c, e.AssetId), HttpStatusCode.Conflict,
                Response.InvalidAsperaTransfer_NoTransferableFiles,
                Response.InvalidAssetStateCode);

            ExceptionMappingService.RegisterMapping<InvalidStreamSourceException>(Response.InvalidStreamSource,
                (e, c) => GetExtraInformationWithDescription(c, e.Message),
                HttpStatusCode.BadRequest, Response.InvalidStreamSource,
                Response.InvalidStreamSourceCode);

            ExceptionMappingService.RegisterMapping<MediaboxAccessDeniedException>(
                Response.MediaBoxAccessDenied,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Forbidden,
                Response.MediaBoxAccessDenied,
                Response.MediaBoxAccessDeniedCode);

            ExceptionMappingService.RegisterMapping<MediaBoxUpdateForbiddenException>(
                Response.InsufficientPermissionsForUpdateMediabox,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForUpdateMediabox,
                Response.InsufficientPermissionsCode);

            ExceptionMappingService.RegisterMapping<ProtectedMediaboxAccessDeniedException>(
                Response.MediaBoxAccessDenied,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Forbidden,
                Response.MediaBoxAccessDenied,
                Response.ProtectedMediaBoxAccessDeniedCode);

            ExceptionMappingService.RegisterMapping<MediaboxNotFoundException>(
                Response.MediaBoxNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.MediaBoxNotFound,
                Response.MediaBoxNotFoundCode);

            ExceptionMappingService.RegisterMapping<MediaboxExpiredException>(
                Response.MediaboxNotAvailable,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.MediaboxNotAvailable,
                Response.MediaboxNotAvailableCode);

            ExceptionMappingService.RegisterMapping<MediaboxClosedException>(
                Response.MediaboxClosed,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.MediaboxClosed,
                Response.MediaboxClosedCode);

            ExceptionMappingService.RegisterMapping<MediaboxAccessDeniedException>(
                Response.MediaBoxAccessDenied,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.MediaBoxNotFound,
                Response.MediaBoxNotFoundCode,
                controllerName: "MediaboxController");

            ExceptionMappingService.RegisterMapping<OverlappingChangesException>(
                Response.OverlappingChanges,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.OverlappingChanges,
                Response.OverlappingChangesCode);

            ExceptionMappingService.RegisterMapping<OverlappingChangesException>(
                Response.FolderOverlappingChanges,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.FolderOverlappingChanges,
                Response.OverlappingChangesCode,
                controllerName: "BulkFolderMetadataChangeController");

            ExceptionMappingService.RegisterMapping<InvalidChangesException>(
                Response.InvalidChanges,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidChanges,
                Response.InvalidChangesCode);

            ExceptionMappingService.RegisterMapping<ConflictingChangesException>(
                Response.ConflictingChanges,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.ConflictingChanges,
                Response.ConflictingChangesCode);

            ExceptionMappingService.RegisterMapping<EmptyChangesException>(
                Response.EmptyChanges,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.EmptyChanges,
                Response.EmptyChangesCode);

            ExceptionMappingService.RegisterMapping<ExceededBulkOperationChangeMaxException>(
                Response.ExceededMaxChangeCount,
                (e, c) => GetExtraInformationWithCount(c, e.Count),
                HttpStatusCode.BadRequest,
                Response.ExceededMaxChangeCount,
                Response.ExceededMaxChangeCountCode);

            ExceptionMappingService.RegisterMapping<InvalidAssetForWorkSessionException>(
                Response.InvalidAssetForWorkSession,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidAssetForWorkSession,
                Response.InvalidAssetForWorkSessionCode);

            // MediaLog

            ExceptionMappingService.RegisterMapping<InvalidTermsTemplateException>(
                Response.InvalidTermsTemplate,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidTermsTemplate,
                Response.InvalidTermsTemplateCode);

            ExceptionMappingService.RegisterMapping<InvalidTermException>(
                Response.InvalidTermsTemplate,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidTermsTemplate,
                Response.InvalidTermsTemplateCode);

            ExceptionMappingService.RegisterMapping<TermsTemplateNotFoundException>(
                Response.TermsTemplateNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.TermsTemplateNotFound,
                Response.TermsTemplateNotFoundCode);

            ExceptionMappingService.RegisterMapping<InvalidQueryOrderFieldException>(Response.InvalidQueryOrderFieldForListTermTemplates,
                (e, c) => GetExtraInformationForInvalidQueryOrderField(c, e),
                HttpStatusCode.BadRequest, Response.InvalidQueryOrderFieldForListTermTemplates,
                Response.InvalidQueryOrderFieldCode,
                controllerName: "MediaLogTemplatesController");

            ExceptionMappingService.RegisterMapping<InvalidQueryOrderFieldForSuggestLabelsException>(Response.InvalidQueryOrderFieldForSuggestLabels,
                (e, c) => GetExtraInformationForInvalidQueryOrderField(c, e),
                HttpStatusCode.BadRequest, Response.InvalidQueryOrderFieldForSuggestLabels,
                Response.InvalidQueryOrderFieldCode);

            ExceptionMappingService.RegisterMapping<NetworkNotFoundException>(Response.WorkSessionNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound, Response.WorkSessionNotFound,
                Response.WorkSessionNotFoundCode,
                controllerName: "MediaLogsController");

            ExceptionMappingService.RegisterMapping<NetworkAccessDeniedException>(Response.WorkSessionNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound, Response.WorkSessionNotFound,
                Response.WorkSessionNotFoundCode,
                controllerName: "MediaLogsController");

            ExceptionMappingService.RegisterMapping<InvalidMediaLogException>(
                Response.InvalidMediaLog,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidMediaLog,
                Response.InvalidMediaLogCode);

            ExceptionMappingService.RegisterMapping<MissingOrInvalidMediaLogNameException>(
                Response.MissingOrInvalidName,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.MissingOrInvalidName,
                Response.MissingOrInvalidNameCode);

            ExceptionMappingService.RegisterMapping<InvalidKeyValuePairException>(
                Response.InvalidMediaLogKeyValuePairs,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidMediaLogKeyValuePairs,
                Response.InvalidMediaLogKeyValuePairsCode);

            ExceptionMappingService.RegisterMapping<InvalidMediaLogTypeException>(
                Response.InvalidMediaLogType,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidMediaLogType,
                Response.InvalidMediaLogTypeCode);

            ExceptionMappingService.RegisterMapping<InvalidMediaLogMarksException>(
                Response.InvalidMediaLogMarks,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidMediaLogMarks,
                Response.InvalidMediaLogMarksCode);

            ExceptionMappingService.RegisterMapping<InvalidMediaLogValuesException>(
                Response.InvalidMediaLogValues,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidMediaLogValues,
                Response.InvalidMediaLogValuesCode);

            ExceptionMappingService.RegisterMapping<MissingMediaLogAllowedValuesException>(
                Response.MissingMediaLogAllowedValues,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.MissingMediaLogAllowedValues,
                Response.MissingMediaLogAllowedValuesCode);

            ExceptionMappingService.RegisterMapping<MissingAssetIdException>(
                Response.AssetIdNotProvided,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.AssetIdNotProvided,
                Response.AssetIdNotProvidedCode);

            ExceptionMappingService.RegisterMapping<MissingWorkSessionIdException>(
                Response.WorkSessionIdNotProvided,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.WorkSessionIdNotProvided,
                Response.WorkSessionIdNotProvidedCode);

            ExceptionMappingService.RegisterMapping<InvalidQueryOrderFieldException>(Response.InvalidQueryOrderFieldForListMediaLogs,
                (e, c) => GetExtraInformationForInvalidQueryOrderField(c, e),
                HttpStatusCode.BadRequest, Response.InvalidQueryOrderFieldForListMediaLogs,
                Response.InvalidQueryOrderFieldCode,
                controllerName: "MediaLogsController");

            ExceptionMappingService.RegisterMapping<ParentMediaLogNotFoundException>(Response.ParentMediaLogNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound, Response.ParentMediaLogNotFound,
                Response.MediaLogNotFoundCode);

            ExceptionMappingService.RegisterMapping<MediaLogNotFoundException>(Response.MediaLogNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound, Response.MediaLogNotFound,
                Response.MediaLogNotFoundCode);

            ExceptionMappingService.RegisterMapping<MediaLogPublishForbiddenException>(
                Response.InsufficientPermissionsForPublishMediaLogs,
                (e, c) => GetExtraInformationForWorkSession(c, e.WorkSessionId),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForPublishMediaLogs,
                Response.InsufficientPermissionsCode);

            ExceptionMappingService.RegisterMapping<ViewContentMetadataForbiddenException>(
                Response.InsufficientPermissionsForListMediaLogs,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForListMediaLogs,
                Response.InsufficientPermissionsCode,
                controllerName: "AssetMediaLogsController");

            ExceptionMappingService.RegisterMapping<ExceededBulkOperationMaxException>(Response.ExceededMaxMediaLogCount,
                (e, c) => GetExtraInformationWithCount(c, e.Count), HttpStatusCode.BadRequest,
                Response.ExceededMaxMediaLogCount,
                Response.ExceededMaxMediaLogCountCode, controllerName: "MediaLogsController");

            ExceptionMappingService.RegisterMapping<InvalidAllottedStorageException>(
                Response.MissingOrInvalidAllottedStorage,
                (e, c) => GetExtraInformationForCreateOrUpdateWorkspace(c, e.NetworkId, e.WorkspaceId, e.StorageAllotted),
                HttpStatusCode.BadRequest,
                Response.MissingOrInvalidAllottedStorage,
                Response.MissingOrInvalidAllottedStorageCode);

            ExceptionMappingService.RegisterMapping<InvalidAllottedStorageException>(
                Response.InvalidAllottedStorage,
                (e, c) => GetExtraInformationForCreateOrUpdateWorkspace(c, e.NetworkId, e.WorkspaceId, e.StorageAllotted),
                HttpStatusCode.BadRequest,
                Response.InvalidAllottedStorage,
                Response.InvalidAllottedStorageCode,
                controllerName: "WorkspaceController");

            ExceptionMappingService.RegisterMapping<InvalidRoleForPrivilegeException>(
                Response.MissingOrInvalidRoleForPrivilege,
                (e, c) => GetExtraInformationForInvalidRoleForPrivilege(c, e.NetworkId, e.WorkspaceId, e.PrivilegeName, e.RoleName),
                HttpStatusCode.BadRequest,
                Response.MissingOrInvalidRoleForPrivilege,
                Response.MissingOrInvalidRoleForPrivilegeCode);

            ExceptionMappingService.RegisterMapping<InvalidRoleForPrivilegeException>(
                Response.InvalidRoleForPrivilege,
                (e, c) => GetExtraInformationForInvalidRoleForPrivilege(c, e.NetworkId, e.WorkspaceId, e.PrivilegeName, e.RoleName),
                HttpStatusCode.BadRequest,
                Response.InvalidRoleForPrivilege,
                Response.InvalidRoleForPrivilegeCode,
                controllerName: "WorkspaceController");

            ExceptionMappingService.RegisterMapping<NetworkStorageExceededException>(
                Response.InsufficientNetworkSpaceAvailable,
                (e, c) => GetExtraInformationForCreateOrUpdateWorkspace(c, e.NetworkId),
                HttpStatusCode.BadRequest,
                Response.InsufficientNetworkSpaceAvailable,
                Response.InsufficientSpaceAvailableCode);

            ExceptionMappingService.RegisterMapping<NetworkOdaMigrationDisabledException>(
                Response.NetworkNotEntitledForOdaMigration,
                (e, c) => GetExtraInformationForCreateOrUpdateWorkspace(c, e.NetworkId),
                HttpStatusCode.Forbidden,
                Response.NetworkNotEntitledForOdaMigration,
                Response.NetworkNotEntitledForOdaMigrationCode);

            ExceptionMappingService.RegisterMapping<InvalidNetworkException>(
                Response.InvalidNetwork,
                (e, c) => GetExtraInformationForCreateOrUpdateWorkspace(c, e.NetworkId),
                HttpStatusCode.BadRequest,
                Response.InvalidNetwork,
                Response.InvalidNetworkCode);

            ExceptionMappingService.RegisterMapping<InvalidOperationOnPersonalNetworkException>(
                Response.InvalidOperationOnPersonalNetwork,
                (e, c) => GetExtraInformationForCreateOrUpdateWorkspace(c, e.NetworkId),
                HttpStatusCode.BadRequest,
                Response.InvalidOperationOnPersonalNetwork,
                Response.InvalidOperationOnPersonalNetworkCode);

            ExceptionMappingService.RegisterMapping<InvalidOperationOnNonCustomWorkspaceException>(
                Response.InvalidOperationOnNonCustomWorkspace,
                (e, c) => GetExtraInformationForCreateOrUpdateWorkspace(c, null, e.WorkspaceId),
                HttpStatusCode.BadRequest,
                Response.InvalidOperationOnNonCustomWorkspace,
                Response.InvalidOperationOnWorkspaceCode);

            ExceptionMappingService.RegisterMapping<AsperaNotEntitledException>(
                Response.AsperaNotEntitled,
                (e, c) => GetExtraInformationForCreateOrUpdateWorkspace(c, null, e.WorkspaceId),
                HttpStatusCode.Conflict,
                Response.AsperaNotEntitled,
                Response.EntitlementRequiredOnWorkspaceCode);

            ExceptionMappingService.RegisterMapping<UpdateWorkspaceNameForbiddenException>(
                Response.InsufficientPermissionsForUpdateWorkspaceName,
                (e, c) => GetExtraInformationForCreateOrUpdateWorkspace(c, null, e.WorkspaceId, e.UserId),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForUpdateWorkspaceName,
                Response.InsufficientPermissionsCode);

            ExceptionMappingService.RegisterMapping<UpdateWorkspaceNoteForbiddenException>(
                Response.InsufficientPermissionsForUpdateWorkspaceNote,
                (e, c) => GetExtraInformationForCreateOrUpdateWorkspace(c, null, e.WorkspaceId, e.UserId),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForUpdateWorkspaceNote,
                Response.InsufficientPermissionsCode);

            ExceptionMappingService.RegisterMapping<UpdateWorkspaceSettingsForbiddenException>(
                Response.InsufficientPermissionsForUpdateWorkspaceSettings,
                (e, c) => GetExtraInformationForCreateOrUpdateWorkspace(c, null, e.WorkspaceId, e.UserId),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForUpdateWorkspaceSettings,
                Response.InsufficientPermissionsCode);

            ExceptionMappingService.RegisterMapping<UpdateCreatorsCloudWorkspaceStorageForbiddenException>(
                Response.InsufficientPermissionsForUpdateWorkspaceSettings,
                (e, c) => GetExtraInformationForCreateOrUpdateWorkspace(c, null, e.WorkspaceId, e.UserId),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForUpdatingCreatorsCloudWorkspaceStorage,
                Response.InsufficientPermissionsForUpdatingCreatorsCloudWorkspaceStorageCode);

            ExceptionMappingService.RegisterMapping<WorkspaceRequestedStorageLessThanUsedException>(
                Response.AllottedStorageLessThanUsed,
                (e, c) => GetExtraInformationForCreateOrUpdateWorkspace(c, null, e.WorkspaceId, new { e.RequestedAllowedStorage, e.CurrentlyUsedStorage }),
                HttpStatusCode.BadRequest,
                Response.AllottedStorageLessThanUsed,
                Response.AllottedStorageLessThanUsedCode);

            ExceptionMappingService.RegisterMapping<CatalogRequestedStorageLessThanUsedException>(
                Response.AllottedStorageLessThanUsed,
                (e, c) => GetExtraInformationForCreateOrUpdateCatalog(c, null, e.CatalogId, new { e.RequestedAllowedStorage, e.CurrentlyUsedStorage }),
                HttpStatusCode.BadRequest,
                Response.AllottedStorageLessThanUsed,
                Response.AllottedStorageLessThanUsedCode);

            ExceptionMappingService.RegisterMapping<DuplicateNameException>(
                Response.CatalogDuplicateName,
                (e, c) => GetExtraInformationForCreateOrUpdateCatalog(c, providedValue: e.Name),
                HttpStatusCode.BadRequest,
                Response.CatalogDuplicateName,
                Response.DuplicateNameCode);

            ExceptionMappingService.RegisterMapping<RecipientsLimitExceededException>(
                Response.RecipientsLimitExceeded,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.RecipientsLimitExceeded,
                Response.RecipientsLimitExceededCode);

            ExceptionMappingService.RegisterMapping<NotificationsLimitExceededException>(
                Response.NotificationsLimitExceeded,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.NotificationsLimitExceeded,
                Response.NotificationsLimitExceededCode);

            ExceptionMappingService.RegisterMapping<InvalidArchiveStatusException>(
                Response.InvalidArchiveStatus,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidArchiveStatus,
                Response.InvalidArchiveStatusCode);

            ExceptionMappingService.RegisterMapping<InvalidTransferStatusException>(
                Response.InvalidTransferStatus,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidTransferStatus,
                Response.InvalidTransferStatusCode);

            ExceptionMappingService.RegisterMapping<InvalidRuntimeException>(
                Response.InvalidRuntime,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidRuntime,
                Response.InvalidRuntimeCode);

            ExceptionMappingService.RegisterMapping<InvalidAclException>(
                Response.InvalidAcl,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidAcl,
                Response.InvalidAclCode);

            ExceptionMappingService.RegisterMapping<AclLockedEntryException>(
                Response.AclLockedEntry,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Conflict,
                Response.AclLockedEntry,
                Response.AclLockedEntryCode);

            ExceptionMappingService.RegisterMapping<InvalidAclSubjectsException>(
                Response.InvalidAclSubjects,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidAclSubjects,
                Response.InvalidAclCode);

            ExceptionMappingService.RegisterMapping<InvalidAclPrivilegesException>(
                Response.InvalidAclPrivileges,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidAclPrivileges,
                Response.InvalidAclCode);

            ExceptionMappingService.RegisterMapping<AclNotFoundException>(
                Response.AclNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.AclNotFound,
                Response.AclNotFoundCode);

            ExceptionMappingService.RegisterMapping<AclRepeatedSubjectsException>(
                Response.InvalidAclRepeatedSubjects,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidAclRepeatedSubjects,
                Response.InvalidAclRepeatedSubjectsCode);

            ExceptionMappingService.RegisterMapping<FolderAdminRequiredException>(
                Response.FolderAdminRequired,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.FolderAdminRequired,
                Response.InvalidAclCode);

            ExceptionMappingService.RegisterMapping<CreateAssetInFolderForbiddenException>(
                Response.InsufficientPermissionsForCreateAsset,
                (e, c) => GetExtraInformationForForbiddenException(c, e),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForCreateAsset,
                Response.InsufficientPermissionsCode);

            ExceptionMappingService.RegisterMapping<ViewAssetActivityStreamForbiddenException>(
                Response.InsufficientPermissionsForViewAssetActivityStream,
                (e, c) => GetExtraInformationForForbiddenException(c, e),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForViewAssetActivityStream,
                Response.InsufficientPermissionsCode);

            ExceptionMappingService.RegisterMapping<DownloadAssetForbiddenException>(
                Response.InsufficientPermissionsForCopyAsset,
                (e, c) => GetExtraInformationForForbiddenException(c, e),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForCopyAsset,
                Response.InsufficientPermissionsCode);

            ExceptionMappingService.RegisterMapping<DownloadAssetForbiddenException>(
                Response.InsufficientPermissionsForDownloadAsset,
                (e, c) => GetExtraInformationForForbiddenException(c, e),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForDownloadAsset,
                Response.InsufficientPermissionsCode, controllerName: "DownloadController");

            ExceptionMappingService.RegisterMapping<CreateTopFolderForbiddenException>(
                Response.InsufficientPermissionsForCreateTopFolder,
                (e, c) => GetExtraInformationForForbiddenException(c, e),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForCreateTopFolder,
                Response.InsufficientPermissionsCode);

            ExceptionMappingService.RegisterMapping<CreateChildFolderForbiddenException>(
                Response.InsufficientPermissionsForCreateChildFolder,
                (e, c) => GetExtraInformationForForbiddenException(c, e),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForCreateChildFolder,
                Response.InsufficientPermissionsCode);

            ExceptionMappingService.RegisterMapping<GetAssetUserPrivilegesForbiddenException>(
                Response.InsufficientPermissionsForRetrievingUserPrivilegesOnAsset,
                (e, c) => GetExtraInformationForForbiddenException(c, e),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForRetrievingUserPrivilegesOnAsset,
                Response.InsufficientPermissionsCode);

            ExceptionMappingService.RegisterMapping<CreateChildFolderWithAclForbiddenException>(
                Response.InsufficientPermissionsForCreateChildFolderWithAcl,
                (e, c) => GetExtraInformationForForbiddenException(c, e),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForCreateChildFolderWithAcl,
                Response.InsufficientPermissionsCode);

            ExceptionMappingService.RegisterMapping<FolderAdminForbiddenException>(
                Response.InsufficientPermissionsForManageFolder,
                (e, c) => GetExtraInformationForForbiddenException(c, e),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForManageFolder,
                Response.InsufficientPermissionsCode);

            ExceptionMappingService.RegisterMapping<BothWorkspaceIdAndCatalogIdProvidedException>(
                Response.WorkspaceIdAndCatalogIdProvided,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.WorkspaceIdAndCatalogIdProvided,
                Response.InvalidRequestCode);

            ExceptionMappingService.RegisterMapping<CatalogFolderIdNotProvidedException>(
                Response.FolderIdNotProvided,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.FolderIdNotProvided,
                Response.FolderIdNotProvidedCode);

            ExceptionMappingService.RegisterMapping<FolderNotPartOfCatalogException>(
                Response.FolderNotMemberOfCatalog,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.FolderNotMemberOfCatalog,
                Response.FolderNotMemberOfCatalogCode);

            ExceptionMappingService.RegisterMapping<CatalogAccessDeniedException>(
                "Catalog access denied.",
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.CatalogNotFound,
                Response.CatalogNotFoundCode);

            ExceptionMappingService.RegisterMapping<CatalogNotFoundException>(
                Response.CatalogNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.CatalogNotFound,
                Response.CatalogNotFoundCode);

            ExceptionMappingService.RegisterMapping<UpdateCatalogForbiddenException>(
                Response.InsufficientPermissionsForManageCatalog,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForManageCatalog,
                Response.InsufficientPermissionsCode);

            ExceptionMappingService.RegisterMapping<InvalidCatalogAdministrators>(
                Response.InvalidCatalogAdministrators,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Forbidden,
                Response.InvalidCatalogAdministrators,
                Response.InvalidCatalogAdministratorsCode);

            ExceptionMappingService.RegisterMapping<InvalidMemberException>(
                Response.MemberNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.MemberNotFound,
                Response.MemberNotFoundCode);

            ExceptionMappingService.RegisterMapping<InvalidRequestException>(
                Response.InvalidRequest,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidRequest,
                Response.InvalidRequestCode,
                controllerName: "EnterpriseNetworkCatalogsController");

            ExceptionMappingService.RegisterMapping<InvalidNameException>(
                Response.MissingOrInvalidNameForCatalogCreation,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.MissingOrInvalidNameForCatalogCreation,
                Response.MissingOrInvalidNameCode,
                controllerName: "EnterpriseNetworkCatalogsController");

            ExceptionMappingService.RegisterMapping<CreateCatalogNotEntitledException>(
                Response.MissingEntitlementForCatalogCreation,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Conflict,
                Response.MissingEntitlementForCatalogCreation,
                Response.EntitlementRequiredCode,
                controllerName: "EnterpriseNetworkCatalogsController");

            ExceptionMappingService.RegisterMapping<CatalogNotFoundException>(
                Response.CatalogNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.CatalogNotFound,
                Response.CatalogNotFoundCode,
                controllerName: "FoldersController");

            ExceptionMappingService.RegisterMapping<InvalidStoragePolicyActionException>(
                 Response.InvalidStoragePolicyAction,
                 (e, c) => GetExtraInformationWithNoAssetId(c),
                 HttpStatusCode.BadRequest,
                 Response.InvalidStoragePolicyAction,
                 Response.InvalidStoragePolicyActionCode);

            ExceptionMappingService.RegisterMapping<InvalidStoragePolicyConditionsException>(
                Response.InvalidStoragePolicyConditions,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidStoragePolicyConditions,
                Response.InvalidStoragePolicyConditionsCode);

            ExceptionMappingService.RegisterMapping<StoragePolicyOperationForbiddenException>(
                Response.InsufficientPermissionsForStoragePolicies,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForStoragePolicies,
                Response.InsufficientPermissionsCode);

            ExceptionMappingService.RegisterMapping<StoragePolicyWorkspaceConflictException>(
                Response.ConflictiveSettingsWorkspaceStoragePolicies,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.ConflictiveSettingsWorkspaceStoragePolicies,
                Response.ConflictiveSettingsCode);

            ExceptionMappingService.RegisterMapping<StoragePoliciesNotEntitledException>(
                Response.NetworkNotEntitledToStoragePolicies,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Conflict,
                Response.NetworkNotEntitledToStoragePolicies,
                Response.EntitlementRequiredCode);

            ExceptionMappingService.RegisterMapping<WorkspaceNotFoundException>(
                Response.WorkspaceNotFound,
                (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                HttpStatusCode.NotFound,
                Response.WorkspaceNotFound,
                Response.WorkspaceNotFoundCode,
                controllerName: "WorkspaceStoragePoliciesController");

            ExceptionMappingService.RegisterMapping<WorkspaceAccessDeniedException>(
                Response.WorkspaceNotFound,
                (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                HttpStatusCode.NotFound,
                Response.WorkspaceNotFound,
                Response.WorkspaceNotFoundCode,
                controllerName: "WorkspaceStoragePoliciesController");

            ExceptionMappingService.RegisterMapping<StoragePolicyNotFoundException>(
                Response.WorkspaceNotFound,
                (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.PolicyId),
                HttpStatusCode.NotFound,
                Response.StoragePolicyNotFound,
                Response.StoragePolicyNotFoundCode,
                controllerName: "WorkspaceStoragePolicyController");

            ExceptionMappingService.RegisterMapping<StoragePolicyAlreadyExistsForWorkspaceException>(
                Response.StoragePolicyAlreadyExistsForWorkspaceCode,
                (e, c) => GetExtraInformationIncludingWorkspaceId(c, e.Action, e.WorkspaceId),
                HttpStatusCode.BadRequest,
                Response.StoragePolicyAlreadyExistsForWorkspace,
                Response.StoragePolicyAlreadyExistsForWorkspaceCode,
                controllerName: "WorkspaceStoragePolicyController");

            ExceptionMappingService.RegisterMapping<WorkspaceAccessDeniedException>(
                Response.WorkspaceNotFound,
                (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                HttpStatusCode.NotFound,
                Response.WorkspaceNotFound,
                Response.WorkspaceNotFoundCode,
                controllerName: "WorkspaceStoragePolicyController");

            ExceptionMappingService.RegisterMapping<UpdateFolderForbiddenException>(
                Response.InsufficientPermissionsForUpdateFolder,
                (e, c) => GetExtraInformationForForbiddenException(c, e),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForUpdateFolder,
                Response.InsufficientPermissionsCode);

            ExceptionMappingService.RegisterMapping<UpdateAssetForbiddenException>(
                Response.InsufficientPermissionsForUpdateAsset,
                (e, c) => GetExtraInformationForForbiddenException(c, e),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForUpdateAsset,
                Response.InsufficientPermissionsCode);

            ExceptionMappingService.RegisterMapping<InvalidAclPrivilegesException>(
                Response.InvalidQueryPrivilegesFilterMessage,
                (e, c) => GetExtraInformation(c, e),
                HttpStatusCode.BadRequest,
                Response.InvalidQueryPrivilegesFilterMessage,
                Response.InvalidQueryPrivilegesFilterMessageCode,
                controllerName: "CatalogTopFoldersController");

            ExceptionMappingService.RegisterMapping<InvalidAclPrivilegesException>(
                Response.InvalidQueryPrivilegesFilterMessage,
                (e, c) => GetExtraInformation(c, e),
                HttpStatusCode.BadRequest,
                Response.InvalidQueryPrivilegesFilterMessage,
                Response.InvalidQueryPrivilegesFilterMessageCode,
                controllerName: "FolderContentsController");

            ExceptionMappingService.RegisterMapping<ViewElementsForbiddenException>(
                Response.InsufficientPermissionsForViewElement,
                (e, c) => GetExtraInformation(c, e.AssetId),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForViewElement,
                Response.InsufficientPermissionsCode,
                controllerName: "AssetElementController");

            ExceptionMappingService.RegisterMapping<ThumbnailsSourceIdNotProvidedException>(
                Response.ThumbnailsSourceIdNotProvided,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.ThumbnailsSourceIdNotProvided,
                Response.InvalidThumbnailsSourceCode);

            ExceptionMappingService.RegisterMapping<InvalidThumbnailsSourceKindException>(
                Response.InvalidThumbnailsSourceKind,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidThumbnailsSourceKind,
                Response.InvalidThumbnailsSourceCode);

            ExceptionMappingService.RegisterMapping<ThumbnailsSourceNotFoundException>(
                Response.ThumbnailsSourceNotFound,
                (e, c) => GetExtraInformationWithMiniFile(c, e.ThumbnailsSource),
                HttpStatusCode.BadRequest,
                Response.ThumbnailsSourceNotFound,
                Response.InvalidThumbnailsSourceCode);

            ExceptionMappingService.RegisterMapping<ElementNotAssociatedWithAssetException>(
                Response.ElementNotAssociatedWithAsset,
                (e, c) => GetExtraInformationWithAssetIdAndElementId(c, e.AssetId, e.ElementId),
                HttpStatusCode.BadRequest,
                Response.ElementNotAssociatedWithAsset,
                Response.InvalidThumbnailsSourceCode);

            ExceptionMappingService.RegisterMapping<ThumbnailsSourceDeletedException>(
                Response.ThumbnailsSourceDeleted,
                (e, c) => GetExtraInformationWithMiniFile(c, e.ThumbnailsSource),
                HttpStatusCode.BadRequest,
                Response.ThumbnailsSourceDeleted,
                Response.InvalidThumbnailsSourceCode);

            ExceptionMappingService.RegisterMapping<InvalidThumbnailsSourceFileTypeException>(
                Response.InvalidThumbnailsSourceFileType,
                (e, c) => GetExtraInformationWithMiniFile(c, e.ThumbnailsSource),
                HttpStatusCode.BadRequest,
                Response.InvalidThumbnailsSourceFileType,
                Response.InvalidThumbnailsSourceCode);

            ExceptionMappingService.RegisterMapping<ThumbnailsSourceHasNoThumbnailsException>(
                Response.ThumbnailsSourceHasNoThumbnails,
                (e, c) => GetExtraInformationWithMiniFile(c, e.ThumbnailsSource),
                HttpStatusCode.BadRequest,
                Response.ThumbnailsSourceHasNoThumbnails,
                Response.InvalidThumbnailsSourceCode);

            ExceptionMappingService.RegisterMapping<InvalidCopyElementRequestException>(
                Response.InvalidCopyElementRequest,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidCopyElementRequest,
                Response.InvalidCopyElementRequestCode);

            ExceptionMappingService.RegisterMapping<AssetNotFoundInFolderException>(
                Response.AssetNotPartOfFolder,
                (e, c) => GetExtraInformationForAssetWithFolder(c, e),
                HttpStatusCode.NotFound,
                Response.AssetNotPartOfFolder,
                Response.AssetNotPartOfFolderCode);

            ExceptionMappingService.RegisterMapping<InvalidCopyElementRequestException>(
                Response.InvalidCopyElementRequest,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidCopyElementRequest,
                Response.InvalidCopyElementRequestCode);

            ExceptionMappingService.RegisterMapping<ElementNotCopyableException>(
                Response.ElementNotReady,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.ElementNotReady,
                Response.ElementNotReadyCode);

            ExceptionMappingService.RegisterMapping<AssetAccessDeniedException>(
                "Access denied.",
                (e, c) => GetExtraInformation(c, e.AssetId),
                HttpStatusCode.BadRequest,
                Response.SourceOrTargetAssetNotFound,
                Response.AssetNotFoundCode,
                controllerName: "BulkCopyElementController");

            ExceptionMappingService.RegisterMapping<AssetNotFoundException>(
                Response.SourceOrTargetAssetNotFound,
                (e, c) => GetExtraInformation(c, e.AssetId),
                HttpStatusCode.BadRequest,
                Response.SourceOrTargetAssetNotFound,
                Response.AssetNotFoundCode,
                controllerName: "BulkCopyElementController");

            ExceptionMappingService.RegisterMapping<ElementAccessDeniedException>(
                "Access denied.",
                (e, c) => GetExtraInformationWithElementId(c, e.ElementId),
                HttpStatusCode.BadRequest,
                Response.ElementNotFound,
                Response.ElementNotFoundCode,
                controllerName: "BulkCopyElementController");

            ExceptionMappingService.RegisterMapping<ElementNotFoundException>(
                Response.ElementNotFound,
                (e, c) => GetExtraInformationWithElementId(c, e.ElementId),
                HttpStatusCode.BadRequest,
                Response.ElementNotFound,
                Response.ElementNotFoundCode,
                controllerName: "BulkCopyElementController");


            ExceptionMappingService.RegisterMapping<InvalidOperationOnLockedElementException>(
                Response.InvalidOperationOnElementCode,
                (e, c) => GetExtraInformationWithElementId(c, e.ElementId),
                HttpStatusCode.BadRequest,
                Response.InvalidLockOperationOnElement,
                Response.InvalidOperationOnElementCode,
                controllerName: "LockElementController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnLockedElementException>(
                Response.InvalidOperationOnElementCode,
                (e, c) => GetExtraInformationWithElementId(c, e.ElementId),
                HttpStatusCode.Conflict,
                Response.InvalidThumbnailChange,
                Response.InvalidOperationOnElementCode,
                controllerName: "AssetThumbnailsController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnLockedElementException>(
                Response.InvalidOperationOnElementCode,
                (e, c) => GetExtraInformationWithElementId(c, e.ElementId),
                HttpStatusCode.Conflict,
                Response.InvalidElementRename,
                Response.InvalidOperationOnElementCode,
                controllerName: "AssetElementController");

            ExceptionMappingService.RegisterMapping<InvalidFileTypeException>(
                Response.InvalidFileTypeCode,
                (e, c) => GetExtraInformationForInvalidFileName(c, e.FileName),
                HttpStatusCode.BadRequest,
                Response.InvalidElementExtensionChange,
                Response.InvalidFileTypeCode,
                controllerName: "AssetElementController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnLockedElementException>(
                Response.InvalidOperationOnElementCode,
                (e, c) => GetExtraInformationWithElementId(c, e.ElementId),
                HttpStatusCode.Conflict,
                Response.InvalidDeleteOnLockedElement,
                Response.InvalidOperationOnElementCode,
                controllerName: "BulkDeleteElementController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnLockedElementException>(
                Response.InvalidOperationOnElementCode,
                (e, c) => GetExtraInformationWithElementId(c, e.ElementId),
                HttpStatusCode.Conflict,
                Response.InvalidMetadataChangeOnLockedElement,
                Response.InvalidOperationOnElementCode,
                controllerName: "BulkElementMetadataChangeController");

            ExceptionMappingService.RegisterMapping<LockElementsForbiddenException>(
                Response.InsufficientPermissionsCode,
                (e, c) => GetExtraInformationWithAssetIdAndElementId(c, e.AssetId, e.ElementId),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForLockingElement,
                Response.InsufficientPermissionsCode,
                controllerName: "LockElementController");

            ExceptionMappingService.RegisterMapping<UpdateElementsForbiddenException>(
                Response.InsufficientPermissionsForUpdatingElement,
                (e, c) => GetExtraInformationWithAssetIdAndElementId(c, e.AssetId, e.ElementId),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForUpdatingElement,
                Response.InsufficientPermissionsForUpdatingElementCode,
                controllerName: "AssetElementController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnDeletedElementException>(
                Response.InvalidOperationOnDeletedElement,
                (e, c) => GetExtraInformationForElement(c, e.FileId), HttpStatusCode.BadRequest,
                Response.InvalidOperationOnDeletedElement,
                Response.ElementDeletedCode,
                controllerName: "AssetElementController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnDeletedFileException>(
                Response.InvalidOperationOnDeletedParentAsset,
                (e, c) => GetExtraInformationForElement(c, e.FileId), HttpStatusCode.BadRequest,
                Response.InvalidOperationOnDeletedParentAsset,
                Response.AssetDeletedCode,
                controllerName: "AssetElementController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnTrashedFileException>(
                Response.InvalidOperationOnTrashedParentAsset,
                (e, c) => GetExtraInformationForFileOperations(c, e.FileId, e.FileType),
                HttpStatusCode.BadRequest,
                Response.InvalidOperationOnTrashedParentAsset,
                Response.AssetTrashedCode,
                controllerName: "AssetElementController");

            ExceptionMappingService.RegisterMapping<ExceededBulkOperationMaxException>(Response.ExceededMaxElementCount,
                (e, c) => GetExtraInformationWithCount(c, e.Count), HttpStatusCode.BadRequest,
                Response.ExceededMaxElementCount,
                Response.ExceededMaxElementCountCode,
                controllerName: "BulkDeleteElementController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnDeletedFileException>(Response.InvalidOperationOnDeletedElement,
                (e, c) => GetExtraInformationForElement(c, e.FileId), HttpStatusCode.NotFound,
                Response.InvalidOperationOnDeletedElement,
                Response.ElementDeletedCode,
                controllerName: "BulkDeleteElementController");

            ExceptionMappingService.RegisterMapping<AssetAccessDeniedException>(Response.ElementNotFound,
                (e, c) => GetExtraInformation(c, e.AssetId), HttpStatusCode.NotFound,
                Response.ElementNotFound,
                Response.ElementNotFoundCode,
                controllerName: "BulkDeleteElementController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnDeletedFileException>(Response.InvalidOperationOnDeletedElement,
                (e, c) => GetExtraInformationForElement(c, e.FileId), HttpStatusCode.NotFound,
                Response.InvalidOperationOnDeletedElement,
                Response.ElementDeletedCode,
                controllerName: "BulkElementMetadataChangeController");

            ExceptionMappingService.RegisterMapping<CatalogFolderInMediaBoxException>(
                Response.CatalogFolderIdInMediaBox,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.CatalogFolderIdInMediaBox,
                Response.CatalogFolderIdInMediaBoxCode,
                controllerName: "MediaboxesController");

            ExceptionMappingService.RegisterMapping<ExceededBulkOperationMaxException>(
                Response.ExceededMaxOperationCountCode,
                (e, c) => GetExtraInformationWithCount(c, e.Count),
                HttpStatusCode.BadRequest,
                Response.ExceededMaxSourcesAndTargetsCount,
                Response.ExceededMaxOperationCountCode,
                controllerName: "BulkCopyElementController");

            ExceptionMappingService.RegisterMapping<CatalogNotFoundException>(Response.CatalogNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest, Response.CatalogNotFound,
                Response.CatalogNotFoundCode, controllerName: "AssetMultipartUploadController");

            ExceptionMappingService.RegisterMapping<FolderNotFoundException>(Response.FolderNotFound,
                (e, c) => GetExtraInformation(c, e.FolderId),
                HttpStatusCode.BadRequest, Response.FolderNotFound,
                Response.FolderNotFoundCode, controllerName: "AssetMultipartUploadController");

            ExceptionMappingService.RegisterMapping<FolderNotFoundException>(Response.AssetNotFound,
                (e, c) => GetExtraInformation(c, e.FolderId),
                HttpStatusCode.NotFound, Response.AssetNotFound,
                Response.AssetNotFoundCode, controllerName: "AssetMultipartUploadManifestController");

            ExceptionMappingService.RegisterMapping<FolderNotFoundException>(Response.AssetNotFound,
                (e, c) => GetExtraInformation(c, e.FolderId),
                HttpStatusCode.NotFound, Response.AssetNotFound,
                Response.AssetNotFoundCode, controllerName: "AssetMultipartUploadSessionController");

            ExceptionMappingService.RegisterMapping<AssetAccessDeniedException>("Access denied.",
                                            (e, c) => GetExtraInformation(c, e.AssetId),
                                            HttpStatusCode.BadRequest, Response.AssetNotFound,
                                            Response.AssetNotFoundCode, controllerName: "ElementMultipartUploadManifestController");

            ExceptionMappingService.RegisterMapping<AssetNotFoundException>(Response.AssetNotFound,
                                                    (e, c) => GetExtraInformation(c, e.AssetId), HttpStatusCode.BadRequest,
                                                    Response.AssetNotFound,
                                                    Response.AssetNotFoundCode, controllerName: "ElementMultipartUploadManifestController");

            ExceptionMappingService.RegisterMapping<CreateElementForbiddenException>(Response.InsufficientPermissionsForCreateElement,
                                                            (e, c) => GetExtraInformationForForbiddenException(c, e),
                                                            HttpStatusCode.Forbidden,
                                                            Response.InsufficientPermissionsForCreateElement,
                                                            Response.InsufficientPermissionsCode, controllerName: "ElementMultipartUploadManifestController");

            ExceptionMappingService.RegisterMapping<AssetAccessDeniedException>("Access denied.",
                                            (e, c) => GetExtraInformation(c, e.AssetId),
                                            HttpStatusCode.BadRequest, Response.AssetNotFound,
                                            Response.AssetNotFoundCode, controllerName: "ElementMultipartUploadSessionController");

            ExceptionMappingService.RegisterMapping<AssetNotFoundException>(Response.AssetNotFound,
                                                    (e, c) => GetExtraInformation(c, e.AssetId), HttpStatusCode.BadRequest,
                                                    Response.AssetNotFound,
                                                    Response.AssetNotFoundCode, controllerName: "ElementMultipartUploadSessionController");

            ExceptionMappingService.RegisterMapping<CreateElementForbiddenException>(Response.InsufficientPermissionsForCreateElement,
                                                            (e, c) => GetExtraInformationForForbiddenException(c, e),
                                                            HttpStatusCode.Forbidden,
                                                            Response.InsufficientPermissionsForCreateElement,
                                                            Response.InsufficientPermissionsCode, controllerName: "ElementMultipartUploadSessionController");

            ExceptionMappingService.RegisterMapping<ReportInProgressException>(Response.InvalidReportRequestCode,
                                                            (e, c) => GetExtraInformationforSearchExportReport(c, e.ReportId),
                                                            HttpStatusCode.Conflict,
                                                            Response.InvalidReportRequestMessage,
                                                            Response.InvalidReportRequestCode);

            ExceptionMappingService.RegisterMapping<ReportsInProgressException>(Response.InvalidReportRequestCode,
                                                            (e, c) => GetExtraInformationforMediaBoxExportReport(c, e.ReportIds),
                                                            HttpStatusCode.Conflict,
                                                            Response.InvalidReportRequestMessage,
                                                            Response.InvalidReportRequestCode);

            ExceptionMappingService.RegisterMapping<ExceededReportInProgressMaxException>(Response.ExceededMaxReportInProgressCode,
                                                (e, c) => GetExtraInformationWithNoAssetId(c),
                                                HttpStatusCode.BadRequest,
                                                Response.ExceededMaxReportInProgress,
                                                Response.ExceededMaxReportInProgressCode);

            ExceptionMappingService.RegisterMapping<InvalidArchiveTypeException>(Response.InvalidArchiveType,
                                                            (e, c) => GetExtraInformationWithNoAssetId(c),
                                                            HttpStatusCode.BadRequest,
                                                            Response.InvalidArchiveType,
                                                            Response.InvalidArchiveTypeCode);

            ExceptionMappingService.RegisterMapping<InvalidOperationOnExternalSourceFileException>(
                Response.InvalidOperationOnExternalFile,
                (e, c) => GetExtraInformation(c, e.FileId),
                HttpStatusCode.BadRequest,
                Response.InvalidOperationOnExternalFile,
                Response.InvalidOperationOnExternalFileCode);

            ExceptionMappingService.RegisterMapping<InvalidOperationOnImportedExternalFileException>(
                Response.InvalidOperationOnImportedExternalFile,
                (e, c) => GetExtraInformation(c, e.FileId),
                HttpStatusCode.BadRequest,
                Response.InvalidOperationOnImportedExternalFile,
                Response.InvalidOperationOnExternalFileCode);

            ExceptionMappingService.RegisterMapping<InvalidExternalCopyToOtherEnterpriseNetworkException>(
                Response.InvalidOperationOnExternalFile,
                (e, c) => GetExtraInformation(c, e.FileId),
                HttpStatusCode.BadRequest,
                Response.InvalidOperationOnExternalFile_CopyOutsideEnterpriseNetwork,
                Response.InvalidOperationOnExternalFileCode);

            ExceptionMappingService.RegisterMapping<CopyWatermarkedAssetForbiddenException>(
                Response.InsufficientPermissionsForCopyFromWatermarkedWorkspaces,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForCopyFromWatermarkedWorkspaces,
                Response.InsufficientPermissionsCode);


            ExceptionMappingService.RegisterMapping<InvalidOperationOnWatermarkedWorkspaceException>(
                Response.InvalidOperationOnWatermarkedWorkspace,
                (e, c) => GetExtraInformationIncludingWorkspaceId(c, null, e.WorkspaceId),
                HttpStatusCode.Conflict, Response.InvalidOperationOnWatermarkedWorkspace,
                Response.InvalidOperationOnWatermarkedWorkspaceCode);

            ExceptionMappingService.RegisterMapping<AclRoleNotFoundException>(
                Response.RoleNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.RoleNotFound,
                Response.RoleNotFoundCode);

            ExceptionMappingService.RegisterMapping<AclRoleNotFoundException>(
                Response.RoleNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.RoleNotFound,
                Response.RoleNotFoundCode,
                controllerName: "FolderAclController");

            ExceptionMappingService.RegisterMapping<AclRoleNotFoundException>(
                Response.RoleNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.RoleNotFound,
                Response.RoleNotFoundCode,
                controllerName: "FoldersController");

            ExceptionMappingService.RegisterMapping<AssetNotIngestedException>(
                Response.AssetNotIngested,
                (e, c) => GetExtraInformation(c, e.AssetId),
                HttpStatusCode.BadRequest,
                Response.AssetNotIngested,
                Response.InvalidAssetStateCode);

            ExceptionMappingService.RegisterMapping<InvalidAssetOperationOnWatermarkedWorkspace>(
                Response.InvalidOperationOnWatermarkedWorkspace,
                (e, c) => GetExtraInformationIncludingWorkspaceId(c, e.AssetId, e.WorkspaceId),
                HttpStatusCode.BadRequest, Response.InvalidOperationOnWatermarkedWorkspaceCode,
                Response.InvalidOperationOnWatermarkedWorkspace);

            // User Groups

            ExceptionMappingService.RegisterMapping<UserGroupAccessDeniedException>(
                "User group access denied.",
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.UserGroupNotFound,
                Response.UserGroupNotFoundCode);

            ExceptionMappingService.RegisterMapping<UserGroupAccessDeniedException>(
                "User group access denied.",
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Conflict,
                Response.UserGroupNotFound,
                Response.UserGroupNotFoundCode,
                controllerName: "FoldersController");

            ExceptionMappingService.RegisterMapping<UserGroupNotFoundException>(
                Response.UserGroupNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.UserGroupNotFound,
                Response.UserGroupNotFoundCode);

            ExceptionMappingService.RegisterMapping<ListUserGroupsForbiddenException>(
                Response.InsufficientPermissionsForListingUserGroups,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForListingUserGroups,
                Response.InsufficientPermissionsCode);

            ExceptionMappingService.RegisterMapping<CreateUserGroupsForbiddenException>(
                Response.InsufficientPermissionsForCreatingUserGroups,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForCreatingUserGroups,
                Response.InsufficientPermissionsCode);

            ExceptionMappingService.RegisterMapping<UpdateUserGroupsForbiddenException>(
                Response.InsufficientPermissionsForUpdatingUserGroups,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForUpdatingUserGroups,
                Response.InsufficientPermissionsCode);

            ExceptionMappingService.RegisterMapping<DeleteUserGroupsForbiddenException>(
                Response.InsufficientPermissionsForDeletingUserGroups,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForDeletingUserGroups,
                Response.InsufficientPermissionsCode);

            ExceptionMappingService.RegisterMapping<RevokeUserAccessForbiddenException>(
                Response.InsufficientPermissionsForRevokingUserAccess,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForRevokingUserAccess,
                Response.InsufficientPermissionsCode);

            ExceptionMappingService.RegisterMapping<UpdateUserGroupMembersForbiddenException>(
                Response.InsufficientPermissionsForUpdatingUserGroupMembers,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForUpdatingUserGroupMembers,
                Response.InsufficientPermissionsCode);

            ExceptionMappingService.RegisterMapping<OverlappingChangesException>(
                Response.OverlappingChangesForUserGroupMembers,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.OverlappingChangesForUserGroupMembers,
                Response.OverlappingChangesCode,
                controllerName: "UserGroupMembersController");

            ExceptionMappingService.RegisterMapping<UserNotFoundException>(
                Response.UserNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.UserNotFound,
                Response.UserNotFoundCode,
                controllerName: "CatalogUserGroupsController");

            ExceptionMappingService.RegisterMapping<UserGroupsInResourcesException>(
                Response.UserGroupDeleteConflict,
                (e, c) => GetExtraInformationForOnlyAdminUserInFolders(c, e),
                HttpStatusCode.Conflict,
                Response.UserGroupDeleteConflict,
                Response.UserGroupDeleteConflictCode);


            ExceptionMappingService.RegisterMapping<ArgumentNullException>(Response.ItemIdNotProvided,
                (e, c) => GetExtraInformation(c, e),
                HttpStatusCode.BadRequest, Response.ItemIdNotProvided,
                Response.ItemIdNotProvidedCode, controllerName: "BulkElementDetailsController");

            ExceptionMappingService.RegisterMapping<ListingDeletedAssetException>(Response.AssetDeleted,
                (e, c) => GetExtraInformation(c, e.AssetId),
                HttpStatusCode.Conflict, Response.AssetDeleted,
                Response.AssetDeletedCode, controllerName: "BulkElementDetailsController");

            ExceptionMappingService.RegisterMapping<ListingDeletedElementException>(Response.ElementDeleted,
                (e, c) => GetExtraInformation(c, e.ElementId),
                HttpStatusCode.Conflict, Response.ElementDeleted,
                Response.ElementDeletedCode, controllerName: "BulkElementDetailsController");

            ExceptionMappingService.RegisterMapping<ElementsNotFoundForBulkListingException>(Response.BulkOperationError,
                (e, c) => GetExtraInformation(c, e),
                HttpStatusCode.Conflict, Response.BulkOperationError,
                Response.BulkOperationErrorCode, controllerName: "BulkElementDetailsController");

            ExceptionMappingService.RegisterMapping<InvalidLimitOrOffsetException>(Response.InvalidLimitOrOffsetForElements,
                (e, c) => GetExtraInformationForInvalidLimitOrOffsetWhenQueryingFolder(c, e),
                HttpStatusCode.BadRequest, Response.InvalidLimitOrOffsetForElements,
                Response.InvalidLimitOrOffsetCode, controllerName: "BulkElementDetailsController");

            ExceptionMappingService.RegisterMapping<InvalidQueryOrderFieldException>(Response.InvalidQueryOrderFieldForListElements,
                (e, c) => GetExtraInformationForInvalidQueryOrderField(c, e),
                HttpStatusCode.BadRequest, Response.InvalidQueryOrderFieldForListElements,
                Response.InvalidQueryOrderFieldCode, controllerName: "BulkElementDetailsController");

            ExceptionMappingService.RegisterMapping<CatalogNotFoundException>(Response.CatalogNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest, Response.CatalogNotFound,
                Response.CatalogNotFoundCode, controllerName: "AssetMultipartUploadController");

            ExceptionMappingService.RegisterMapping<EnterpriseNetworkNotFoundException>(Response.EnterpriseNetworkNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.EnterpriseNetworkNotFound,
                Response.EnterpriseNetworkNotFoundCode);

            ExceptionMappingService.RegisterMapping<EnterpriseNetworkAccessDeniedException>(Response.EnterpriseNetworkNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.EnterpriseNetworkNotFound,
                Response.EnterpriseNetworkNotFoundCode);

            ExceptionMappingService.RegisterMapping<InvalidEmailException>(Response.InvalidEmail,
                (e, c) => GetExtraInformation(c, e),
                HttpStatusCode.BadRequest, Response.InvalidEmail,
                Response.InvalidEmailCode);

            //Mediabox Download
            ExceptionMappingService.RegisterMapping<MediaboxAssetNotAvailableForDownloadException>(Response.InvalidDownloadRequest,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound, Response.InvalidDownloadRequest,
                Response.InvalidDownloadRequestCode);

            ExceptionMappingService.RegisterMapping<MediaboxAssetNotValidForProxyDownloadException>(Response.InvalidDownloadRequest,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound, Response.InvalidDownloadRequest,
                Response.InvalidDownloadRequestCode);

            ExceptionMappingService.RegisterMapping<MediaboxElementNotAvailableForDownloadException>(Response.InvalidDownloadRequest,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound, Response.InvalidDownloadRequest,
                Response.InvalidDownloadRequestCode);

            ExceptionMappingService.RegisterMapping<MediaboxProxyNotAvailableForDownloadException>(Response.InvalidDownloadRequest,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound, Response.InvalidDownloadRequest,
                Response.InvalidDownloadRequestCode);

            ExceptionMappingService.RegisterMapping<ElementNotAvailableForDownloadException>(Response.InvalidDownloadRequest,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound, Response.InvalidDownloadRequest,
                Response.InvalidDownloadRequestCode);

            ExceptionMappingService.RegisterMapping<ProxyNotAvailableForDownloadException>(Response.InvalidDownloadRequest,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound, Response.InvalidDownloadRequest,
                Response.InvalidDownloadRequestCode);

            ExceptionMappingService.RegisterMapping<ThumbnailNotAvailableForDownloadException>(Response.InvalidDownloadRequest,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound, Response.InvalidDownloadRequest,
                Response.InvalidDownloadRequestCode);

            ExceptionMappingService.RegisterMapping<ExceededBulkOperationMaxException>(
               Response.ExceededMaxFileDownloadCount,
               (e, c) => GetExtraInformationWithCount(c, e.Count),
               HttpStatusCode.BadRequest,
               Response.ExceededMaxFileDownloadCount,
               Response.ExceededMaxFileDownloadCountCode,
               controllerName: "MediaboxDownloadController");

            ExceptionMappingService.RegisterMapping<ExceededBulkOperationMaxException>(
               Response.ExceededMaxFileDownloadCount,
               (e, c) => GetExtraInformationWithCount(c, e.Count),
               HttpStatusCode.BadRequest,
               Response.ExceededMaxFileDownloadCount,
               Response.ExceededMaxFileDownloadCountCode,
               controllerName: "DownloadElementController");

            ExceptionMappingService.RegisterMapping<ExceededBulkOperationMaxException>(
               Response.ExceededMaxFileDownloadCount,
               (e, c) => GetExtraInformationWithCount(c, e.Count),
               HttpStatusCode.BadRequest,
               Response.ExceededMaxFileDownloadCount,
               Response.ExceededMaxFileDownloadCountCode,
               controllerName: "DownloadProxyController");

            ExceptionMappingService.RegisterMapping<ExceededBulkOperationMaxException>(
               Response.ExceededMaxFileDownloadCount,
               (e, c) => GetExtraInformationWithCount(c, e.Count),
               HttpStatusCode.BadRequest,
               Response.ExceededMaxFileDownloadCount,
               Response.ExceededMaxFileDownloadCountCode,
               controllerName: "DownloadThumbnailController");

            ExceptionMappingService.RegisterMapping<InvalidSearchCountFilterException>(
                Response.InvalidTermCountFilter,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidTermCountFilter,
                Response.InvalidTermCountFilterCode,
                controllerName: "FacetedSearchCountUserContentsController");

            ExceptionMappingService.RegisterMapping<OpenSearchServerException>(
                Response.UnhandledException,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.InternalServerError,
                Response.UnhandledException,
                Response.UnhandledExceptionCode,
                LogLevel.Error);

            ExceptionMappingService.RegisterMapping<ExceededBulkOperationMaxException>(
                Response.ExceededMaxTermCount,
                (e, c) => GetExtraInformationWithCount(c, e.Count),
                HttpStatusCode.BadRequest,
                Response.ExceededMaxTermCount,
                Response.ExceededMaxTermCountCode,
                controllerName: "FacetedSearchCountUserContentsController");

            ExceptionMappingService.RegisterMapping<MetadataTemplateNotFoundException>(
                Response.MetadataTemplateNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.MetadataTemplateNotFound,
                Response.MetadataTemplateNotFoundCode);

            ExceptionMappingService.RegisterMapping<EventTypeForbiddenException>(
                Response.InsufficientPermissionsForViewingEvents,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InsufficientPermissionsForViewingEvents,
                Response.InsufficientPermissionsForViewingEventsCode);

            ExceptionMappingService.RegisterMapping<InvalidCopyFolderRequestException>(
                Response.InvalidCopyFolderRequest,
                (e, c) => GetExtraInformationWithMessage(c, e.Message),
                HttpStatusCode.BadRequest,
                Response.InvalidCopyFolderRequest,
                Response.InvalidCopyFolderRequestCode,
                controllerName: "BulkCopyFolderController");

            ExceptionMappingService.RegisterMapping<InvalidAttachedFileRequestException>(
                Response.InvalidRequest,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidAttachedFileRequest,
                Response.InvalidRequestCode,
                controllerName: "FrameController");

            ExceptionMappingService.RegisterMapping<VisualWatermarkDownloadRequestException>(
                Response.InvalidCiTranscodeJobRequest,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest, Response.InvalidCiTranscodeJobRequest,
                Response.InvalidDownloadRequestCode);

            RegisterCiSystemApisMappings();
            RegisterMediaboxRestrictionsMappings();
            RegisterWorkSessionsMappings();
            RegisterCreateFrameMappings();
            RegisterClientMappings();
            RegisterUserStateMappings();
            RegisterElementUploadMappings();
            RegisterMfaMappings();
            RegisterOAuthDeviceCodeMappings();
            RegisterDownloadWaveformMappings();
            RegisterTimeMarksMappings();
            RegisterDolbyMappings();
            RegisterFileRequestsMappings();
            RegisterConversationsMappings();
            RegisterNetworkSpaceWatermarkingMappings();
            RegisterBulkOperationMappings();
            RegisterForensicWatermarkMappings();
            RegisterAssetMigrationMappings();
            RegisterCreatorsCloudMappings();
            RegisterLocationLookupMappings();
            RegisterCompressMappings();
        }

        private void RegisterCiSystemApisMappings()
        {
            ExceptionMappingService.RegisterMapping<InvalidClientException>(
                Response.ClientNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.ClientNotFound,
                Response.ClientNotFoundCode);

            ExceptionMappingService.RegisterMapping<UserNotFoundException>(
                Response.UserNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.UserNotFound,
                Response.UserNotFoundCode);
        }

        private void RegisterMediaboxRestrictionsMappings()
        {
            ExceptionMappingService.RegisterMapping<MediaboxTypeNotAllowedException>(
                Response.MediaBoxTypeNotAllowed,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.MediaBoxTypeNotAllowed,
                Response.MediaBoxTypeNotAllowedCode);

            ExceptionMappingService.RegisterMapping<MediaboxNeverExpiresNotAllowedException>(
                Response.MediaBoxNeverExpiresNotAllowed,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.MediaBoxNeverExpiresNotAllowed,
                Response.MediaBoxNeverExpiresNotAllowedCode);

            ExceptionMappingService.RegisterMapping<MediaboxExpirationDateNotAllowedException>(
                Response.MediaBoxExpirationDateNotAllowed,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.MediaBoxExpirationDateNotAllowed,
                Response.MediaBoxExpirationDateNotAllowedCode);

            ExceptionMappingService.RegisterMapping<MediaboxCommentSettingsNotAllowedException>(
                Response.MediaboxCommentSettingsNotAllowed,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.MediaboxCommentSettingsNotAllowed,
                Response.MediaboxCommentSettingsNotAllowedCode);

            ExceptionMappingService.RegisterMapping<ForensicWatermarkMediaboxUpdateException>(
                Response.ForensicWatermarkMediaboxUpdate,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.ForensicWatermarkMediaboxUpdate,
                Response.ForensicWatermarkMediaboxUpdateCode);

            ExceptionMappingService.RegisterMapping<ForensicWatermarkIdNotCreatedException>(
                Response.ForensicWatermarkIdNotCreated,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Conflict,
                Response.ForensicWatermarkIdNotCreated,
                Response.ForensicWatermarkIdNotCreatedCode
                );
        }

        private void RegisterWorkSessionsMappings()
        {
            ExceptionMappingService.RegisterMapping<InvalidWorkSessionStatusException>(
                Response.InvalidWorkSessionStatus,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidWorkSessionStatus,
                Response.InvalidWorkSessionStatusCode);

            ExceptionMappingService.RegisterMapping<InvalidDueDateException>(
                Response.InvalidDueDate,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidDueDate,
                Response.InvalidDueDateCode);

            ExceptionMappingService.RegisterMapping<WorkSessionNotFoundException>(
                Response.WorkSessionNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.WorkSessionNotFound,
                Response.WorkSessionNotFoundCode);

            ExceptionMappingService.RegisterMapping<WorkSessionAccessDeniedException>(
                "Access denied.",
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.WorkSessionNotFound,
                Response.WorkSessionNotFoundCode);

            ExceptionMappingService.RegisterMapping<WorkSessionUpdateForbiddenException>(
                Response.InsufficientPermissionsForUpdatingWorkSession,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForUpdatingWorkSession,
                Response.InsufficientPermissionsCode);

            ExceptionMappingService.RegisterMapping<InvalidAssetStatusException>(
                Response.InvalidAssetStatusForWorkSession,
                (e, c) => GetExtraInformation(c, e.AssetId),
                HttpStatusCode.BadRequest,
                Response.InvalidAssetStatusForWorkSession,
                Response.InvalidAssetStateCode);

            ExceptionMappingService.RegisterMapping<AssetNotFoundException>(
                Response.AssetNotFound,
                (e, c) => GetExtraInformation(c, e.AssetId),
                HttpStatusCode.BadRequest,
                Response.AssetNotFound,
                Response.AssetNotFoundCode,
                controllerName: "WorkSessionController");

            ExceptionMappingService.RegisterMapping<AssetAccessDeniedException>(
                "Access denied.",
                (e, c) => GetExtraInformation(c, e.AssetId),
                HttpStatusCode.BadRequest,
                Response.AssetNotFound,
                Response.AssetNotFoundCode,
                controllerName: "WorkSessionController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnDeletedFileException>(
                Response.InvalidOperationOnDeletedAsset,
                (e, c) => GetExtraInformationForFileOperations(c, e.FileId, e.FileType),
                HttpStatusCode.BadRequest,
                Response.AssetNotFound,
                Response.AssetNotFoundCode,
                controllerName: "WorkSessionController");

            ExceptionMappingService.RegisterMapping<InvalidOperationOnTrashedFileException>(
                Response.InvalidOperationOnTrashedAsset,
                (e, c) => GetExtraInformationForFileOperations(c, e.FileId, e.FileType),
                HttpStatusCode.BadRequest,
                Response.InvalidOperationOnTrashedAsset,
                Response.AssetTrashedCode,
                controllerName: "WorkSessionController");

            ExceptionMappingService.RegisterMapping<InvalidWorkspaceException>(
                Response.InvalidAssetSpaceForWorkSession,
                (e, c) => GetExtraInformationWithMessage(c, e.Message),
                HttpStatusCode.BadRequest,
                Response.InvalidAssetSpaceForWorkSession,
                Response.InvalidAssetsCode,
                controllerName: "WorkSessionController");

            ExceptionMappingService.RegisterMapping<InvalidQueryOrderFieldException>(
                Response.InvalidQueryOrderFieldForListWorkSessions,
                (e, c) => GetExtraInformationForInvalidQueryOrderField(c, e),
                HttpStatusCode.BadRequest,
                Response.InvalidQueryOrderFieldForListWorkSessions,
                Response.InvalidQueryOrderFieldCode,
                controllerName: "WorkSessionsController");

            ExceptionMappingService.RegisterMapping<InvalidQueryOrderFieldException>(
                Response.InvalidQueryOrderFieldForListWorkSessions,
                (e, c) => GetExtraInformationForInvalidQueryOrderField(c, e),
                HttpStatusCode.BadRequest,
                Response.InvalidQueryOrderFieldForListWorkSessions,
                Response.InvalidQueryOrderFieldCode,
                controllerName: "ReceivedWorkSessionsController");

            ExceptionMappingService.RegisterMapping<InvalidWorkSessionManagePermissionsException>(
                Response.InvalidWorkSessionManagePermissions,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidWorkSessionManagePermissions,
                Response.InvalidWorkSessionManagePermissionsCode);
        }

        private void RegisterCreateFrameMappings()
        {
            ExceptionMappingService.RegisterMapping<InvalidSourceTypeForExtractFrameException>(
                Response.InvalidSourceFileType,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidSourceFileType,
                Response.InvalidRequestCode);

            ExceptionMappingService.RegisterMapping<InvalidTargetFormatForExtractFrameException>(
                Response.InvalidTargetFormat,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidTargetFormat,
                Response.InvalidRequestCode);

            ExceptionMappingService.RegisterMapping<IncompatibleTimecodeFormatException>(
                Response.IncompatibleTimecodeFormat,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.IncompatibleTimecodeFormat,
                Response.InvalidRequestCode);
        }

        private void RegisterTimeMarksMappings()
        {
            ExceptionMappingService.RegisterMapping<InvalidTimeMarkException>(
                Response.InvalidTimeMark,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidTimeMark,
                Response.InvalidRequestCode);

            ExceptionMappingService.RegisterMapping<InvalidTimeMarkTypeException>(
                Response.InvalidTimeMark,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidTimeMark,
                Response.InvalidRequestCode);
        }

        private void RegisterDolbyMappings()
        {
            ExceptionMappingService.RegisterMapping<InvalidDolbyJobTypeException>(
                Response.InvalidDolbyJobType,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidDolbyJobType,
                Response.InvalidRequestCode);
        }

        private void RegisterClientMappings()
        {
            ExceptionMappingService.RegisterMapping<ClientUnauthorizedException>(
                Response.UnauthorizedClientError,
                (e, c) => GetExtraInformationForOAuth2(c),
                HttpStatusCode.Forbidden,
                Response.UnauthorizedClientError,
                Response.UnauthorizedClientErrorCode);

            ExceptionMappingService.RegisterMapping<ClientRevokedException>(
                Response.RevokedClientError,
                (e, c) => GetExtraInformationForOAuth2(c),
                HttpStatusCode.Forbidden,
                Response.RevokedClientError,
                Response.RevokedClientErrorCode);
        }

        private void RegisterUserStateMappings()
        {
            ExceptionMappingService.RegisterMapping<UserNotRegisteredException>(
                Response.UserNotRegistered,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.UserNotRegistered,
                Response.InvalidUserStateCode,
                LogLevel.Error);

            ExceptionMappingService.RegisterMapping<UserNotActiveException>(
                Response.UserNotActive,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.UserNotActive,
                Response.InvalidUserStateCode,
                LogLevel.Error);

            ExceptionMappingService.RegisterMapping<UserIsLockedException>(
                Response.UserIsLocked,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.UserIsLocked,
                Response.InvalidUserStateCode);

            ExceptionMappingService.RegisterMapping<UserNotVerifiedException>(
                Response.UserNotVerified,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.UserNotVerified,
                Response.InvalidUserStateCode);
        }

        private void RegisterElementUploadMappings()
        {
            ExceptionMappingService.RegisterMapping<SourceAssetIdNotProvidedException>(
                Response.SourceAssetIdNotProvided,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.SourceAssetIdNotProvided,
                Response.SourceAssetIdNotProvidedCode);

            ExceptionMappingService.RegisterMapping<AssetAlreadyArchivedException>(
                Response.SourceAssetAlreadyArchived,
                (e, c) => GetExtraInformation(c, e.AssetId),
                HttpStatusCode.Conflict,
                Response.SourceAssetAlreadyArchived,
                Response.InvalidAssetStateCode);

            ExceptionMappingService.RegisterMapping<AssetNotIngestedException>(
                Response.SourceAssetNotIngested,
                (e, c) => GetExtraInformation(c, e.AssetId),
                HttpStatusCode.BadRequest,
                Response.SourceAssetNotIngested,
                Response.InvalidAssetStateCode);

            ExceptionMappingService.RegisterMapping<SourceAssetDeletedException>(
                Response.SourceAssetDeleted,
                (e, c) => GetExtraInformation(c, e.AssetId),
                HttpStatusCode.BadRequest,
                Response.SourceAssetDeleted,
                Response.SourceAssetDeletedCode);

            ExceptionMappingService.RegisterMapping<TargetAssetDeletedException>(
                Response.TargetAssetDeleted,
                (e, c) => GetExtraInformation(c, e.AssetId),
                HttpStatusCode.BadRequest,
                Response.TargetAssetDeleted,
                Response.TargetAssetDeletedCode);
        }

        private void RegisterMfaMappings()
        {
            ExceptionMappingService.RegisterMapping<MfaRequiredException>(
               Response.MfaRequired,
               (e, c) => GetExtraInformationForOAuth2(c),
               HttpStatusCode.Unauthorized,
               Response.MfaRequired,
               Response.MfaRequiredCode);

            ExceptionMappingService.RegisterMapping<MfaNotEnabledException>(
               Response.MfaNotEnabled,
               (e, c) => GetExtraInformationForOAuth2(c),
               HttpStatusCode.BadRequest,
               Response.MfaNotEnabled,
               Response.MfaNotEnabledCode);

            ExceptionMappingService.RegisterMapping<MfaFactorNotSupportedException>(
               Response.MfaFactorNotSupported,
               (e, c) => GetExtraInformationForOAuth2(c),
               HttpStatusCode.BadRequest,
               Response.MfaFactorNotSupported,
               Response.MfaFactorNotSupportedCode);

            ExceptionMappingService.RegisterMapping<MfaFactorNotEnrolledException>(
               Response.MfaFactorNotEnrolled,
               (e, c) => GetExtraInformationForOAuth2(c),
               HttpStatusCode.BadRequest,
               Response.MfaFactorNotEnrolled,
               Response.MfaFactorNotEnrolledCode);

            ExceptionMappingService.RegisterMapping<MfaCodeNotProvidedException>(
               Response.MfaCodeNotProvided,
               (e, c) => GetExtraInformationForOAuth2(c),
               HttpStatusCode.BadRequest,
               Response.MfaCodeNotProvided,
               Response.MfaCodeNotProvidedCode);

            ExceptionMappingService.RegisterMapping<MfaCodeInvalidException>(
               Response.MfaCodeInvalid,
               (e, c) => GetExtraInformationForOAuth2(c),
               HttpStatusCode.BadRequest,
               Response.MfaCodeInvalid,
               Response.MfaCodeInvalidCode);

            ExceptionMappingService.RegisterMapping<MfaCodeExpiredException>(
               Response.MfaCodeExpired,
               (e, c) => GetExtraInformationForOAuth2(c),
               HttpStatusCode.BadRequest,
               Response.MfaCodeExpired,
               Response.MfaCodeExpiredCode);

            ExceptionMappingService.RegisterMapping<MfaFactorEnrolledException>(
               Response.MfaFactorEnrolled,
               (e, c) => GetExtraInformationForOAuth2(c),
               HttpStatusCode.BadRequest,
               Response.MfaFactorEnrolled,
               Response.MfaFactorEnrolledCode);

            ExceptionMappingService.RegisterMapping<MfaFactorMismatchException>(
               Response.MfaFactorMismatch,
               (e, c) => GetExtraInformationForOAuth2(c),
               HttpStatusCode.BadRequest,
               Response.MfaFactorMismatch,
               Response.MfaFactorMismatchCode);

            ExceptionMappingService.RegisterMapping<MfaInvalidPhoneNumberException>(
               Response.MfaInvalidPhoneNumber,
               (e, c) => GetExtraInformationForOAuth2(c),
               HttpStatusCode.BadRequest,
               Response.MfaInvalidPhoneNumber,
               Response.MfaInvalidPhoneNumberCode);

            ExceptionMappingService.RegisterMapping<MfaInvalidPhoneNumberException>(
               Response.MfaInvalidPhoneNumber,
               (e, c) => GetExtraInformationForOAuth2(c),
               HttpStatusCode.BadRequest,
               Response.MfaInvalidPhoneNumber,
               Response.MfaInvalidPhoneNumberCode);

            ExceptionMappingService.RegisterMapping<MfaOtpLimitExceededException>(
                Response.OtpLimitExceeded,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.OtpLimitExceeded,
                Response.OtpLimitExceededCode);

            ExceptionMappingService.RegisterMapping<MfaLockedException>(
                Response.MfaLocked,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Unauthorized,
                Response.MfaLocked,
                Response.MfaLockedCode);

            ExceptionMappingService.RegisterMapping<DistributionListNotFoundException>(Response.DistributionListNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest, Response.DistributionListNotFound,
                Response.DistributionListNotFoundCode);

            ExceptionMappingService.RegisterMapping<ManageNetworkMfaForbiddenException>(
                Response.InsufficientPermissionsForManagingNetworkMfa,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForManagingNetworkMfa,
                Response.InsufficientPermissionsCode);
        }

        private void RegisterOAuthDeviceCodeMappings()
        {
            ExceptionMappingService.RegisterMapping<DeviceCodeNotFoundException>(
               Response.DeviceCodeNotFound,
               (e, c) => GetExtraInformationForOAuth2(c),
               HttpStatusCode.NotFound,
               Response.DeviceCodeNotFound,
               Response.DeviceCodeNotFoundCode);

            ExceptionMappingService.RegisterMapping<ExpiredDeviceCodeException>(
               Response.DeviceCodeExpired,
               (e, c) => GetExtraInformationForOAuth2(c),
               HttpStatusCode.BadRequest,
               Response.DeviceCodeExpired,
               Response.DeviceCodeExpiredCode);

            ExceptionMappingService.RegisterMapping<DeviceCodeAuthorizationPendingException>(
               Response.DeviceCodeAuthorizationPending,
               (e, c) => GetExtraInformationForOAuth2(c),
               HttpStatusCode.BadRequest,
               Response.DeviceCodeAuthorizationPending,
               Response.DeviceCodeAuthorizationPendingCode);

            ExceptionMappingService.RegisterMapping<InvalidRequestException>(
                Response.InvalidRequest,
                (e, c) => GetExtraInformationForOAuth2(c),
                HttpStatusCode.BadRequest,
                Response.InvalidRequest,
                Response.InvalidOAuthRequestCode,
                controllerName: "OAuth2DeviceCodesController",
                isOAuth2Error: true);

            ExceptionMappingService.RegisterMapping<ClientNotFoundException>(
                Response.ClientNotFound,
                (e, c) => GetExtraInformationForOAuth2(c),
                HttpStatusCode.BadRequest,
                Response.ClientNotFound,
                Response.InvalidClientCode,
                controllerName: "OAuth2DeviceCodesController",
                isOAuth2Error: true);
        }

        private void RegisterDownloadWaveformMappings()
        {
            ExceptionMappingService.RegisterMapping<InvalidWaveformTypeException>(
                Response.InvalidWaveformType,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidWaveformType,
                Response.InvalidWaveformTypeCode);

            ExceptionMappingService.RegisterMapping<InvalidWaveformModeException>(
                Response.InvalidWaveformPlaybackMode,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidWaveformPlaybackMode,
                Response.InvalidWaveformPlaybackModeCode);
        }

        private void RegisterFileRequestsMappings()
        {
            ExceptionMappingService.RegisterMapping<FileRequestNotFoundException>(
                Response.FileRequestNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.FileRequestNotFound,
                Response.FileRequestNotFoundCode);

            ExceptionMappingService.RegisterMapping<FileRequestAccessDeniedException>(
                Response.FileRequestAccessDenied,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.FileRequestAccessDenied,
                Response.FileRequestAccessDeniedCode);

            ExceptionMappingService.RegisterMapping<InvalidAccessCodeException>(
                Response.InvalidAccessCode,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.FileRequestNotFound,
                Response.FileRequestNotFoundCode);

            ExceptionMappingService.RegisterMapping<RevokedAccessCodeException>(
                Response.InvalidAccessCode_Revoked,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.FileRequestNotFound,
                Response.FileRequestNotFoundCode,
                controllerName: "OpenFileRequestController");

            ExceptionMappingService.RegisterMapping<DeletedAccessCodeException>(
                Response.InvalidAccessCode_Deleted,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.FileRequestNotFound,
                Response.FileRequestNotFoundCode,
                controllerName: "OpenFileRequestController");

            ExceptionMappingService.RegisterMapping<ExpiredAccessCodeException>(
                Response.InvalidAccessCode_Expired,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.FileRequestNotAvailable,
                Response.FileRequestNotAvailableCode,
                controllerName: "OpenFileRequestController");

            ExceptionMappingService.RegisterMapping<FileRequestExpiredOrInactiveException>(
                Response.FileRequestNotAvailable,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.FileRequestNotAvailable,
                Response.FileRequestNotAvailableCode);

            ExceptionMappingService.RegisterMapping<InsufficientSpaceAvailableException>(
                Response.InsufficientSpaceAvailableForFileRequest,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Conflict,
                Response.InsufficientSpaceAvailableForFileRequest,
                Response.InsufficientSpaceAvailableCode,
                controllerName: "OpenFileRequestController");
        }

        private void RegisterConversationsMappings()
        {
            ExceptionMappingService.RegisterMapping<CommentAccessDeniedException>(
                Response.CommentNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.CommentNotFound,
                Response.CommentNotFoundCode);

            ExceptionMappingService.RegisterMapping<CommentContentEncodingNotSupportedException>(
                Response.InvalidCommentContent,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidCommentContent,
                Response.InvalidCommentContentCode);

            ExceptionMappingService.RegisterMapping<InvalidCommentPositionException>(
                Response.InvalidCommentPosition,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidCommentPosition,
                Response.InvalidCommentPositionCode);

            ExceptionMappingService.RegisterMapping<ConversationNotFoundException>(
                Response.ConversationNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.ConversationNotFound,
                Response.ConversationNotFoundCode);

            ExceptionMappingService.RegisterMapping<CommentNotFoundException>(
                Response.CommentNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.CommentNotFound,
                Response.CommentNotFoundCode);

            ExceptionMappingService.RegisterMapping<ConversationResourceTypeNotSupported>(
                Response.ConversationResourceTypeNotSupported,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.ConversationResourceTypeNotSupported,
                Response.ConversationResourceTypeNotSupportedCode);

            ExceptionMappingService.RegisterMapping<ConversationAlreadyExistsException>(
                Response.ConversationAlreadyExists,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Conflict,
                Response.ConversationAlreadyExists,
                Response.ConversationAlreadyExistsCode);

            ExceptionMappingService.RegisterMapping<ConversationAccessDeniedException>(
                Response.ConversationAccessDenied,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.ConversationAccessDenied,
                Response.ConversationAccessDeniedCode);

            ExceptionMappingService.RegisterMapping<InvalidCommentMomentException>(
                Response.InvalidCommentMoment,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidCommentMoment,
                Response.InvalidCommentMomentCode);

            ExceptionMappingService.RegisterMapping<InvalidCommentContentException>(
                Response.InvalidCommentContent,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidCommentContent,
                Response.InvalidCommentContentCode);

            ExceptionMappingService.RegisterMapping<CommentCharacterLimitExceededException>(
                Response.CommentCharacterLimitExceeded,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.CommentCharacterLimitExceeded,
                Response.CommentCharacterLimitExceededCode);

            ExceptionMappingService.RegisterMapping<InvalidCommentStatusException>(
                Response.InvalidCommentStatus,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidCommentStatus,
                Response.InvalidCommentStatusCode);

            ExceptionMappingService.RegisterMapping<ParentCommentNotFoundException>(
                Response.ParentCommentNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.ParentCommentNotFound,
                Response.ParentCommentNotFoundCode);

            ExceptionMappingService.RegisterMapping<DeleteCommentForbiddenException>(
                Response.InsufficientPermissionsForDeletingComment,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForDeletingComment,
                Response.InsufficientPermissionsForDeletingCommentCode);

            ExceptionMappingService.RegisterMapping<UpdateCommentForbiddenException>(
                Response.InsufficientPermissionsForUpdatingComment,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForUpdatingComment,
                Response.InsufficientPermissionsForUpdatingCommentCode);

            ExceptionMappingService.RegisterMapping<ConversationSubscriptionNotFoundException>(
                Response.ConversationSubscriptionNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.ConversationSubscriptionNotFound,
                Response.ConversationSubscriptionNotFoundCode);
        }

        private void RegisterNetworkSpaceWatermarkingMappings()
        {
            ExceptionMappingService.RegisterMapping<ManageNetworkSpaceWatermarkingForbiddenException>(
                Response.InsufficientPermissionsForManagingNetworkSpaceWatermarking,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForManagingNetworkSpaceWatermarking,
                Response.InsufficientPermissionsCode);

            ExceptionMappingService.RegisterMapping<GetNetworkSpaceWatermarkingForbiddenException>(
                Response.InsufficientPermissionsForViewingNetworkSpaceWatermarking,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Forbidden,
                Response.InsufficientPermissionsForViewingNetworkSpaceWatermarking,
                Response.InsufficientPermissionsCode);

            ExceptionMappingService.RegisterMapping<NetworkNotAllowedToConfigureSpaceWatermarkingException>(
                Response.NetworkNotAllowedToConfigureSpaceWatermarking,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.NetworkNotAllowedToConfigureSpaceWatermarking,
                Response.NetworkNotAllowedToConfigureSpaceWatermarkingCode);
        }

        private void RegisterBulkOperationMappings()
        {
            ExceptionMappingService.RegisterMapping<BulkOperationNotFoundException>(
                Response.BulkOperationNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.BulkOperationNotFound,
                Response.BulkOperationNotFoundCode);

            ExceptionMappingService.RegisterMapping<BulkOperationNotRetryableException>(
                Response.BulkOperationNotRetryable,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Conflict,
                Response.BulkOperationNotRetryable,
                Response.BulkOperationNotRetryableCode);

            ExceptionMappingService.RegisterMapping<InvalidBulkOperationRequestException>(
                Response.InvalidBulkOperationRequest,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.InvalidBulkOperationRequest,
                Response.InvalidBulkOperationRequestCode);
        }

        private void RegisterForensicWatermarkMappings()
        {
            ExceptionMappingService.RegisterMapping<ForensicWatermarkingDeniedException>(
                Response.ForensicWatermarkingNotEnabled,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.ForensicWatermarkingNotEnabled,
                Response.EntitlementRequiredCode);

            ExceptionMappingService.RegisterMapping<ForensicWatermarkingSecurityException>(
                Response.ForensicWatermarkingSecurity,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.ForensicWatermarkingSecurity,
                Response.ForensicWatermarkingSecurityCode);

            ExceptionMappingService.RegisterMapping<ForensicWatermarkDownloadNotAllowedException>(
                Response.ForensicWatermarkingDownload,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.ForensicWatermarkingDownload,
                Response.ForensicWatermarkingDownloadCode);

            ExceptionMappingService.RegisterMapping<ForensicWatermarkingSpaceWatermarkedException>(
                Response.ForensicWatermarkingSpaceWatermarked,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.ForensicWatermarkingSpaceWatermarked,
                Response.ForensicWatermarkingSpaceWatermarkedCode);

            ExceptionMappingService.RegisterMapping<ForensicWatermarkingFolderException>(
                Response.ForensicWatermarkingFolder,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.ForensicWatermarkingFolder,
                Response.ForensicWatermarkingFolderCode);

            ExceptionMappingService.RegisterMapping<ForensicWatermarkingRuntimeException>(
                Response.ForensicWatermarkingRuntime,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.ForensicWatermarkingRuntime,
                Response.ForensicWatermarkingRuntimeCode);

            ExceptionMappingService.RegisterMapping<ForensicWatermarkAccessException>(
                Response.ForensicWatermarkException,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.ForensicWatermarkException,
                Response.ForensicWatermarkExceptionCode);

            ExceptionMappingService.RegisterMapping<ForensicWatermarkProxyKeyException>(
                Response.ForensicWatermarkException,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.ForensicWatermarkException,
                Response.ForensicWatermarkExceptionCode);

            ExceptionMappingService.RegisterMapping<ForensicWatermarkTrackingFieldsException>(
                Response.ForensicWatermarkException,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.ForensicWatermarkException,
                Response.ForensicWatermarkExceptionCode);

            ExceptionMappingService.RegisterMapping<ForensicWatermarkTokenException>(
                Response.ForensicWatermarkException,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.ForensicWatermarkException,
                Response.ForensicWatermarkExceptionCode);
        }

        private void RegisterAssetMigrationMappings()
        {
            ExceptionMappingService.RegisterMapping<AssetUploadNotCompleteException>(
                Response.AssetUploadNotComplete,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Conflict,
                Response.AssetUploadNotComplete,
                Response.AssetUploadNotCompleteCode, controllerName: "AssetMigrationController");

            ExceptionMappingService.RegisterMapping<SpaceNotByosConfiguredException>(
                Response.SpaceNotByosConfigured,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Conflict,
                Response.SpaceNotByosConfigured,
                Response.SpaceNotByosConfiguredCode, controllerName: "AssetMigrationController");

            ExceptionMappingService.RegisterMapping<AssetInTargetLocationException>(
                Response.AssetInTargetLocation,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Conflict,
                Response.AssetInTargetLocation,
                Response.AssetInTargetLocationCode, controllerName: "AssetMigrationController");

            ExceptionMappingService.RegisterMapping<ElementUploadNotCompleteException>(
                Response.ElementUploadNotComplete,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Conflict,
                Response.ElementUploadNotComplete,
                Response.ElementUploadNotCompleteCode, controllerName: "AssetMigrationController");

            ExceptionMappingService.RegisterMapping<AssetJobsNotCompleteException>(
                Response.AssetJobsNotComplete,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Conflict,
                Response.AssetJobsNotComplete,
                Response.AssetJobsNotCompleteCode, controllerName: "AssetMigrationController");

            ExceptionMappingService.RegisterMapping<ElementJobsNotCompleteException>(
                Response.ElementJobsNotComplete,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Conflict,
                Response.ElementJobsNotComplete,
                Response.ElementJobsNotCompleteCode, controllerName: "AssetMigrationController");

            ExceptionMappingService.RegisterMapping<InvalidArchiveStatusException>(
                Response.InvalidArchiveStatus,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Conflict,
                Response.InvalidArchiveStatusMigration,
                Response.InvalidArchiveStatusMigrationCode,
                controllerName: "AssetMigrationController"
            );

            ExceptionMappingService.RegisterMapping<InvalidRestoreStatusException>(
                Response.InvalidRestoreStatus,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Conflict,
                Response.InvalidRestoreStatus,
                Response.InvalidRestoreStatusCode, controllerName: "AssetMigrationController");

            ExceptionMappingService.RegisterMapping<TargetFileMissingException>(
                Response.TargetFileMissing,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Conflict,
                Response.TargetFileMissing,
                Response.TargetFileMissingCode, controllerName: "AssetMigrationController");

            ExceptionMappingService.RegisterMapping<TargetFileSizeMismatchException>(
                Response.TargetFileSizeMismatch,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Conflict,
                Response.TargetFileSizeMismatch,
                Response.TargetFileSizeMismatchCode, controllerName: "AssetMigrationController");

            ExceptionMappingService.RegisterMapping<AssetMigrationDeniedException>(
                Response.AssetMigrationDenied,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Forbidden,
                Response.AssetMigrationDenied,
                Response.AssetMigrationDeniedCode, controllerName: "AssetMigrationController");

            ExceptionMappingService.RegisterMapping<MigrationUpdateException>(
                Response.MigrationUpdateException,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.InternalServerError,
                Response.MigrationUpdateException,
                Response.MigrationUpdateExceptionCode);
        }

        private void RegisterCreatorsCloudMappings()
        {
            ExceptionMappingService.RegisterMapping<ArgumentNullException>(Response.DataRequestNotProvided,
                (e, c) => GetExtraInformation(c, e),
                HttpStatusCode.BadRequest, Response.DataRequestNotProvided,
                Response.DataRequestNotProvided, controllerName: "CreatorsCloudAuthenticationController");

            ExceptionMappingService.RegisterMapping<InvalidEmailException>(Response.InvalidEmail,
                (e, c) => GetExtraInformation(c, e),
                HttpStatusCode.BadRequest, Response.InvalidEmail,
                Response.InvalidEmailCode, controllerName: "CreatorsCloudAuthenticationController");

            ExceptionMappingService.RegisterMapping<LinkedAccountNotFoundException>(
                Response.LinkedAccountNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.NotFound,
                Response.LinkedAccountNotFound,
                Response.LinkedAccountNotFoundCode,
                controllerName: "LinkedUserController");

            ExceptionMappingService.RegisterMapping<UserNotFoundException>(
                Response.UserNotFound,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.UserNotFound,
                Response.UserNotFoundCode,
                controllerName: "CreatorsCloudUserIntegrationController");

            ExceptionMappingService.RegisterMapping<IntegrationNotAllowedException>(
                Response.IntegrationNotAllowed,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Forbidden,
                Response.IntegrationNotAllowed,
                Response.IntegrationNotAllowedCode,
                controllerName: "CreatorsCloudUserIntegrationController");
        }

        private void RegisterLocationLookupMappings()
        {
            ExceptionMappingService.RegisterMapping<LocationLookupFailedException>(
                Response.LocationLookupFailed,
                (e, c) => GetExtraInformationWithMessage(c, e.Message),
                HttpStatusCode.InternalServerError,
                Response.LocationLookupFailed,
                Response.LocationLookupFailedCode);

            ExceptionMappingService.RegisterMapping<MissingOrInvalidArgumentException>(
                Response.MissingOrInvalidIPAddress,
                (e, c) => GetExtraInformationWithMessage(c, e.Message),
                HttpStatusCode.BadRequest,
                Response.MissingOrInvalidIPAddress,
                Response.MissingOrInvalidIPAddressCode,
                controllerName: "LocationLookupController");
        }

        private void RegisterCompressMappings()
        {
            ExceptionMappingService.RegisterMapping<FilesLimitExceededException>(
                Response.FilesLimitExceeded,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.FilesLimitExceeded,
                Response.FilesLimitExceededCode,
                controllerName: "CompressController");

            ExceptionMappingService.RegisterMapping<FilesSizeLimitExceededException>(
                Response.FilesSizeLimitExceeded,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.BadRequest,
                Response.FilesSizeLimitExceeded,
                Response.FilesSizeLimitExceededCode,
                controllerName: "CompressController");

            ExceptionMappingService.RegisterMapping<InvalidFileStatusException>(
                Response.InvalidFileStatus,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Conflict,
                Response.InvalidFileStatus,
                Response.InvalidFileStatusCode,
                controllerName: "CompressController");

            ExceptionMappingService.RegisterMapping<EmptyRequestException>(
                Response.InvalidFileStatus,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Conflict,
                Response.EmptyRequest,
                Response.EmptyRequestCode,
                controllerName: "CompressController");

            ExceptionMappingService.RegisterMapping<FolderEmptyException>(
                Response.InvalidFileStatus,
                (e, c) => GetExtraInformationWithNoAssetId(c),
                HttpStatusCode.Conflict,
                Response.FolderEmpty,
                Response.FolderEmptyCode,
                controllerName: "CompressController");
        }

private string GetAuthenticationMessage(Exception exception, ExceptionContext context)
        {
            var authenticationException = exception as UnauthorizedAccessException;

            if(authenticationException == null)
            {
                return null;
            }

            return authenticationException.Message;
        }
        

        private string GetSsoAuthRequiredMessage(Exception exception, ExceptionContext context)
        {
            var ssoAuthRequiredException = exception as SsoAuthRequiredException;

            if(ssoAuthRequiredException == null)
            {
                return null;
            }

            if(ssoAuthRequiredException.SsoInformation.Type == SsoType.CustomerSso)
            {
                return "Customer SSO authentication is required.";
            }

            return "Sony authentication is required.";
        }

        private string GetInvalidPropMessage(Exception exception, ExceptionContext context)
        {
            var argumentNullException = exception as ArgumentNullException;

            if (argumentNullException == null)
            {
                return null;
            }

            if (!string.IsNullOrEmpty(argumentNullException.Message))
            {
                return argumentNullException.Message;
            }

            return $"Missing or invalid {argumentNullException.ParamName}";
        }

        private string GetResourceNotFoundMessage(Exception exception, ExceptionContext context)
        {
            var resourceNotFoundException = exception as ResourceNotFoundException;

            if (resourceNotFoundException == null)
            {
                return null;
            }

            if (!string.IsNullOrEmpty(resourceNotFoundException.Message))
            {
                return resourceNotFoundException.Message;
            }

            return $"{resourceNotFoundException.Resource} not found";
        }

        public string GetMcsAuthenticationMessage(Exception exception, ExceptionContext context)
        {
            var mcsAuthenticationException = exception as McsAuthenticationException;

            if (mcsAuthenticationException == null)
            {
                return null;
            }

            return mcsAuthenticationException.Code;
        }

        private object GetExtraInformationForPCU(ExceptionContext context, MissingPcuForExpeditedRestoreException exception)
        {
            return new
            {
                exception.BucketSource,
                exception.Region
            };
        }

        private object GetExtraInformationForAssetWithFolder(ExceptionContext context, AssetNotFoundInFolderException exception)
        {
            return new
            {
                Source = context.Source,
                UserId = context.UserId,
                AssetId = exception.AssetId,
                FolderId = exception.FolderId
            };
        }

        private object GetExtraInformationForOAuth2(ExceptionContext context)
        {
            return new
            {
                Source = context.Source,
                UserId = context.UserId,
                ClientId = context.ClientId
            };
        }

        private object GetExtraInformation(ExceptionContext context, string assetId)
        {
            return new
            {
                Source = context.Source,
                AssetId = assetId,
                UserId = context.UserId
            };
        }
        
        private object GetExtraInformation(ExceptionContext context, UnauthorizedAccessException exception)
        {
            return new
            {
                Source = context.Source,
            };
        }

        private object GetExtraInformation(ExceptionContext context, SsoAuthRequiredException exception)
        {
            return new
            {
                Source = context.Source,
                SsoInformation = exception.SsoInformation,
                Email = exception.Email,
            };
        }

        private object GetExtraInformation(ExceptionContext context, ResourceNotFoundException exception)
        {
            return new { Source = context.Source, Resource = exception.Resource };
        }

        private object GetExtraInformation(ExceptionContext context, McsAuthenticationException exception)
        {
            return new { Source = context.Source, Code = exception.Code };
        }

        private object GetExtraInformation(ExceptionContext context, SonyIdAuthenticationException exception)
        {
            return new { Source = context.Source, ErrorCode = exception.ErrorCode, Content = exception.Content };
        }

        private object GetExtraInformation(ExceptionContext context, DomainNotAllowedException exception)
        {
            return new { Source = context.Source };
        }

        private object GetExtraInformationForAccessCode(ExceptionContext context, string accessCode)
        {
            return new
            {
                Source = context.Source,
                AccessCode = accessCode
            };
        }

        private object GetExtraInformationForInvalidProxyType(ExceptionContext context, string invalidProxyType)
        {
            return new
            {
                Source = context.Source,
                InvalidProxyType = invalidProxyType,
                UserId = context.UserId
            };
        }

        private object GetExtraInformationForInvalidProxyRequest(ExceptionContext context, string proxyKey, string assetId = null)
        {
            return new
            {
                Source = context.Source,
                AssetId = assetId,
                ProxyKey = proxyKey,
                UserId = context.UserId
            };
        }

        private object GetExtraInformationForInvalidAccessToken(ExceptionContext context, string message, string providedScope, string acceptedScope, string codeId)
        {
            return new
            {
                Source = context.Source,
                ProvidedScope = providedScope,
                AcceptedScope = acceptedScope,
                CodeId = codeId,
                Message = message
            };
        }

        private object GetExtraInformationForElement(ExceptionContext context, string elementId)
        {
            return new
            {
                Source = context.Source,
                FileId = elementId,
                UserId = context.UserId
            };
        }

        private object GetExtraInformationWithCount(ExceptionContext context, int count)
        {
            return new
            {
                Source = context.Source,
                Count = count,
                UserId = context.UserId
            };
        }

        private object GetExtraInformationForUnsubscribeWebhook(ExceptionContext context, string message)
        {
            return new
            {
                Source = context.Source,
                Message = message
            };
        }

        private object GetExtraInformationForFileOperations(ExceptionContext context, string fileId, string fileType)
        {
            return new
            {
                Source = context.Source,
                FileId = fileId,
                FileType = fileType,
                UserId = context.UserId
            };
        }

        private object GetExtraInformationWithElementId(ExceptionContext context, string elementId)
        {
            return new
            {
                Source = context.Source,
                ElementId = elementId,
                UserId = context.UserId
            };
        }

        private object GetExtraInformationWithAssetIdAndElementId(ExceptionContext context, string assetId, string elementId)
        {
            return new
            {
                Source = context.Source,
                AssetId = assetId,
                ElementId = elementId,
                UserId = context.UserId
            };
        }

        private object GetExtraInformationWithMiniFile(ExceptionContext context, CiFiles.Models.MiniFile file)
        {
            return new
            {
                Source = context.Source,
                File = file,
                UserId = context.UserId
            };
        }

        private object GetExtraInformationWithCiJobId(ExceptionContext context, string ciJobId)
        {
            return new
            {
                Source = context.Source,
                CiJobId = ciJobId,
                UserId = context.UserId
            };
        }

        private object GetExtraInformationWithIngestJobId(ExceptionContext context, string jobId)
        {
            return new
            {
                Source = context.Source,
                JobId = jobId,
                UserId = context.UserId
            };
        }

        private object GetExtraInformationWithNoAssetId(ExceptionContext context)
        {
            return new
            {
                Source = context.Source,
                UserId = context.UserId
            };
        }

        private object GetExtraInformationForForbiddenException(ExceptionContext context, ForbiddenException exception)
        {
            return new
            {
                Source = context.Source,
                UserId = context.UserId,
                PrivilegeId = exception.PrivilegeId
            };
        }

        private object GetExtraInformationForFindRelatedAssetsException(ExceptionContext context, AssetNotEnabledForFindRelatedException e)
        {
            return new
            {
                Source = context.Source,
                AssetId = e.AssetId,
                CollectionId = e.CollectionId
            };
        }

        private object GetExtraInformationWithNoJobId(ExceptionContext context)
        {
            return new
            {
                Source = context.Source,
                UserId = context.UserId
            };
        }

        private object GetExtraInformationWithOnlyWorkspace(ExceptionContext context, string workspaceId)
        {
            return new
            {
                Source = context.Source,
                UserId = context.UserId,
                WorkspaceId = workspaceId
            };
        }

        private object GetExtraInformationForWorkSession(ExceptionContext context, string workSessionId)
        {
            return new
            {
                Source = context.Source,
                UserId = context.UserId,
                WorkSessionId = workSessionId
            };
        }

        private object GetExtraInformationForCreateOrUpdateWorkspace(ExceptionContext context, string networkId, string workspaceId = null, object providedValue = null)
        {
            return new
            {
                Source = context.Source,
                UserId = context.UserId,
                NetworkId = networkId,
                WorkspaceId = workspaceId,
                ProvidedValue = providedValue
            };
        }

        private object GetExtraInformationForCreateOrUpdateCatalog(ExceptionContext context, string networkId = null, string catalogId = null, object providedValue = null)
        {
            return new
            {
                Source = context.Source,
                UserId = context.UserId,
                NetworkId = networkId,
                CatalogId = catalogId,
                ProvidedValue = providedValue
            };
        }

        private object GetExtraInformationForInvalidRoleForPrivilege(ExceptionContext context, string networkId, string workspaceId, string privilegeName, string roleName)
        {
            return new
            {
                Source = context.Source,
                UserId = context.UserId,
                NetworkId = networkId,
                WorkspaceId = workspaceId,
                PrivilegeName = privilegeName,
                RoleName = roleName
            };
        }


        private object GetExtraInformationWithPartNumber(ExceptionContext context, int partNumber)
        {
            return new
            {
                Source = context.Source,
                UserId = context.UserId,
                PartNumber = partNumber
            };
        }

        private object GetExtraInformationWithPartSize(ExceptionContext context, long partSize)
        {
            return new
            {
                Source = context.Source,
                UserId = context.UserId,
                PartSize = partSize
            };
        }

        private object GetExtraInformationWithName(ExceptionContext context, string name)
        {
            return new
            {
                Source = context.Source,
                UserId = context.UserId,
                Name = name
            };
        }

        private object GetExtraInformationIncludingWorkspaceId(ExceptionContext context, string assetId, string workspaceId, string accessCode = null)
        {
            return new
            {
                Source = context.Source,
                AssetId = assetId,
                WorkspaceId = workspaceId,
                UserId = context.UserId,
                AccessCode = accessCode
            };
        }

        private object GetExtraInformationIncludingDataTransferOperationInfo(ExceptionContext context, long? TransferSize, long TransferLimit, string TransferType, string accessCode = null)
        {
            return new
            {
                Source = context.Source,
                TransferSize = TransferSize,
                TransferLimit = TransferLimit,
                TransferType = TransferType,
                AccessCode = accessCode
            };
        }

        private object GetExtraInformationForAsperaException(ExceptionContext context, IEnumerable<string> asperaHosts, string asperaUserName)
        {
            return new
            {
                Source = context.Source,
                UserId = context.UserId,
                AsperaHosts = asperaHosts,
                AsperaUserName = asperaUserName
            };
        }

        private object GetExtraInformationForChecksumMismatchException(ExceptionContext context, string assetId, string providedChecksum, string calculatedChecksum)
        {
            return new
            {
                Source = context.Source,
                AssetId = assetId,
                UserId = context.UserId,
                ProvidedChecksum = providedChecksum,
                CalculatedChecksum = calculatedChecksum
            };
        }

        private object GetExtraInformationForInvalidFileName(ExceptionContext context, string filename)
        {
            return new
            {
                Source = context.Source,
                FileName = filename,
                UserId = context.UserId
            };
        }

        private object GetExtraInformationForInvalidImportUrl(ExceptionContext context, string sourceFileUrl)
        {
            return new
            {
                Source = context.Source,
                SourceFileUrl = sourceFileUrl,
                UserId = context.UserId
            };
        }

        private object GetExtraInformationWithDescription(ExceptionContext context, string description)
        {
            return new
            {
                Source = context.Source,
                Description = description,
                UserId = context.UserId
            };
        }

        private object GetExtraInformationForSmallPartSize(ExceptionContext context, long partSize, long filesize)
        {
            return new
            {
                Source = context.Source,
                FileSize = filesize,
                PartSize = partSize,
                UserId = context.UserId
            };
        }

        private object GetExtraInformationForInvalidLiveStreamInputType(ExceptionContext context, string inputType)
        {
            return new
            {
                Source = context.Source,
                InputType = inputType,
                UserId = context.UserId
            };
        }

        private object GetExtraInformationForInvalidLiveStreamInputUrl(ExceptionContext context)
        {
            return new
            {
                Source = context.Source,
                UserId = context.UserId
            };
        }

        private object GetExtraInformationForFileManifestFailure(ExceptionContext context, string assetId)
        {
            return new
            {
                Source = context.Source,
                AssetId = assetId,
                UserId = context.UserId
            };
        }

        private object GetExtraInformationForFileManifestNotFound(ExceptionContext context, string assetId, string manifestUri)
        {
            return new
            {
                Source = context.Source,
                AssetId = assetId,
                ManifestUri = manifestUri,
                UserId = context.UserId
            };
        }

        private object GetExtraInformationForInvalidFileSize(ExceptionContext context, long filesize)
        {
            return new
            {
                Source = context.Source,
                FileSize = filesize,
                UserId = context.UserId
            };
        }

        private object GetExtraInformationForObjectStorageException(ExceptionContext context, string bucketname, string objectkey)
        {
            return new
            {
                Source = context.Source,
                BucketName = bucketname,
                ObjectKey = objectkey,
                UserId = context.UserId
            };
        }

        private object GetExtraInformationForFolder(ExceptionContext context, string folderId)
        {
            return new
            {
                Source = context.Source,
                Folder = folderId,
                UserId = context.UserId
            };
        }

        private object GetExtraInformationForInvalidLimitOrOffsetWhenQueryingFolder(ExceptionContext context, InvalidLimitOrOffsetException exception)
        {
            return new
            {
                Source = context.Source,
                UserId = context.UserId,
                FolderId = exception.FolderId,
                Offset = exception.Offset,
                Limit = exception.Limit
            };
        }

        private object GetExtraInformationForInvalidMaxResultCount(ExceptionContext context, InvalidMaxResultCountException exception)
        {
            return new
            {
                Source = context.Source,
                UserId = context.UserId,
                MaxResultCount = exception.MaxResultCount
            };
        }

        private object GetExtraInformationForInvalidQueryApp(ExceptionContext context, InvalidQueryAppException exception)
        {
            return new
            {
                Source = context.Source,
                UserId = context.UserId,
                Apps = exception.Apps
            };
        }

        private object GetExtraInformationForInvalidQueryUserStatus(ExceptionContext context, InvalidQueryUserStatusesException exception)
        {
            return new
            {
                Source = context.Source,
                UserId = context.UserId,
                UserStatus = exception.UserStatuses
            };
        }

        private object GetExtraInformationForInvalidQueryKindFilter(ExceptionContext context, InvalidQueryKindFilterException exception)
        {
            return new
            {
                Source = context.Source,
                UserId = context.UserId,
                KindFilter = exception.Kind
            };
        }

        private object GetExtraInformationForInvalidQueryTypeFilter(ExceptionContext context, InvalidQueryTypeFilterException exception)
        {
            return new
            {
                Source = context.Source,
                UserId = context.UserId,
                KindFilter = exception.Type
            };
        }

        private object GetExtraInformationForInvalidQuerySpaceIdFilter(ExceptionContext context, InvalidQuerySpaceIdFilterException exception)
        {
            return new
            {
                Source = context.Source,
                UserId = context.UserId,
                KindFilter = exception.SpaceId
            };
        }

        private object GetExtraInformationForInvalidQueryFilter(ExceptionContext context, InvalidQueryFilterException exception)
        {
            return new
            {
                Source = context.Source,
                UserId = context.UserId,
                FilterName = exception.FilterName
            };
        }

        private object GetExtraInformationForInvalidQueryOrderField(ExceptionContext context, InvalidQueryOrderFieldException exception)
        {
            return new
            {
                Source = context.Source,
                UserId = context.UserId,
                OrderField = exception.OrderBy
            };
        }

        private object GetExtraInformationForInvalidQueryOrderDirection(ExceptionContext context, InvalidQueryOrderDirectionException exception)
        {
            return new
            {
                Source = context.Source,
                UserId = context.UserId,
                OrderDirection = exception.Direction
            };
        }

        private object GetExtraInformationForPartUpload(ExceptionContext context, UploadPartFailedException exception)
        {
            return new
            {
                Source = context.Source,
                UserId = context.UserId,
                PartNumber = exception.PartNumber,
                AssetId = exception.AssetId
            };
        }

        private object GetExtraInformationIncludingWebhookIdAndAccessCode(ExceptionContext context, WebhookAccessDeniedException exception)
        {
            return new
            {
                Source = context.Source,
                UserId = context.UserId,
                WebhookId = exception.WebhookId,
                AccessCode = exception.AccessCode
            };
        }

        private object GetExtraInformation(ExceptionContext context, UsernameNotAvailableException exception)
        {
            return new
            {
                Source = context.Source
            };
        }

        private object GetExtraInformation(ExceptionContext context, RegistrationException exception)
        {
            return new
            {
                Source = context.Source,
                Reason = exception.Error
            };
        }

        private object GetExtraInformationforSearchExportReport(ExceptionContext context, string reportId)
        {
            return new
            {
                Source = context.Source,
                ReportId = reportId,
                UserId = context.UserId
            };
        }

        private object GetExtraInformationforMediaBoxExportReport(ExceptionContext context, IEnumerable<string> reportIds)
        {
            return new
            {
                Source = context.Source,
                ReportIds = reportIds,
                UserId = context.UserId
            };
        }

        private object GetExtraInformation(ExceptionContext context, InvalidCustomKeyException exception)
        {
            return new
            {
                Source = context.Source,
                InvalidKey = exception.InvalidKey
            };
        }

        private object GetExtraInformation(ExceptionContext context, ClientNotAllowedToVerifyAuthenticElementsException exception)
        {
            return new { Source = context.Source };
        }

        private object GetExtraInformation(ExceptionContext context, NetworkNotAllowedToUploadElementsException exception)
        {
            return new { Source = context.Source };
        }

        private object GetExtraInformation(ExceptionContext context, InvalidAclPrivilegesException exception)
        {
            return new { Source = context.Source };
        }

        private object GetExtraInformation(ExceptionContext context, ArgumentNullException exception)
        {
            return new { Source = context.Source };
        }

        private object GetExtraInformation(ExceptionContext context, ElementsNotFoundForBulkListingException exception)
        {
            return new { Source = context.Source };
        }

        private object GetExtraInformation(ExceptionContext context, InvalidEmailException exception)
        {
            return new
            {
                Source = context.Source,
                Reason = exception.Error
            };
        }

        private object GetExtraInformationWithMessage(ExceptionContext context, string message)
        {
            return new { Source = context.Source, Message = message };
        }

        private object GetExtraInformationForOnlyAdminUserInFolders(ExceptionContext context, UserGroupsInResourcesException exception)
        {
            return new
            {
                Source = context.Source,
                Folders = exception.Folders
            };
        }

        private string GetRegistrationMessage(Exception exception, ExceptionContext context)
        {
            var registrationException = exception as RegistrationException;
            if (registrationException == null)
            {
                return null;
            }

            switch (registrationException.Error)
            {
                case RegistrationException.RegistrationError.MissingOrInvalid:
                    return "Please make sure that all fields are filled out";
                case RegistrationException.RegistrationError.WeakPassword:
                    return "Your new password is too weak";
                case RegistrationException.RegistrationError.InvalidPassword:
                    return "The password provided is invalid. Please enter a valid password value.";
                case RegistrationException.RegistrationError.CharMixPassword:
                    return "Your new password must contain a mix of characters (letters, numbers and/or special characters)";
                case RegistrationException.RegistrationError.FirstNamePassword:
                    return "Your new password cannot contain your first or last name";
                case RegistrationException.RegistrationError.LastNamePassword:
                    return "Your new password cannot contain your first or last name";
                case RegistrationException.RegistrationError.EmailPassword:
                    return "Your new password cannot contain part of your email address";
                case RegistrationException.RegistrationError.CommonPhrasePassword:
                    return "Your password cannot contain the word \"password\"";
                default:
                    return "Unknown error, please try again";
            }
        }


    }
}
