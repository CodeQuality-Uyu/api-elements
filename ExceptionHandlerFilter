using Sony.Ci.Api.Core.Legacy.Extensions;
using Sony.Ci.Api.Core.Legacy;
using Sony.Ci.ErrorMapping.Core;
using Sony.Ci.Logging;
using System.Web.Http.Filters;
using ExceptionContext = Sony.Ci.ErrorMapping.Core.ExceptionContext;

namespace Sony.Ci.Api.Core.Filters
{
    public class ExceptionHandlerFilterAttribute : ExceptionFilterAttribute
    {
        public ExceptionHandlerFilterAttribute(IExceptionMappingService exceptionMappingService) : this(new Logging.Legacy.Logger("Sony.Ci.WebApi"), exceptionMappingService)
        {
        }

        public ExceptionHandlerFilterAttribute(ILogger logger, IExceptionMappingService exceptionMappingService)
        {
            Logger = logger;
            ExceptionMappingService = exceptionMappingService;
            new ExceptionRegistry(ExceptionMappingService).RegisterKnownExceptions();
        }

        public ILogger Logger { get; set; }

        private IExceptionMappingService ExceptionMappingService { get; set; }

        public override void OnException(HttpActionExecutedContext context)
        {
            if (context == null)
            {
                return;
            }

            var exceptionResponse = this.ExceptionMappingService.HandleException(new ExceptionContext
            {
                ClientId = GetClientId(context),
                Exception = context.Exception,
                Source = GetFullControllerName(context),
                UserId = GetUserId(context)
            });


            if (exceptionResponse.IsOAuth2Error)
            {
                context.Response = context.Request.CreateOAuth2ErrorResponse(
                    exceptionResponse.StatusCode,
                    exceptionResponse.Code,
                    exceptionResponse.Message
                );
            }
            else
            {
                context.Response = context.Request.CreateCiErrorResponse(
                    exceptionResponse.StatusCode,
                    exceptionResponse.Code,
                    exceptionResponse.Message
                );
            }
        }

        private string GetFullControllerName(HttpActionExecutedContext context)
        {
            return string.Format("{0}Controller", context.ActionContext.ControllerContext.ControllerDescriptor.ControllerName);
        }

        private string GetUserId(HttpActionExecutedContext context)
        {
            var controller = context.ActionContext.ControllerContext.Controller as ISecureApiController;

            return controller != null && controller.Token != null
                ? controller.Token.UserId
                : null;
        }

        private string GetClientId(HttpActionExecutedContext context)
        {
            var controller = context.ActionContext.ControllerContext.Controller as ISecureApiController;

            return controller != null && controller.Token != null
                ? controller.Token.ClientId
                : null;
        }
    }
}
